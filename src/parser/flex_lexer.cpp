#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 179
#define YY_END_OF_BUFFER 180
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1252] =
    {   0,
        0,    0,  176,  176,    2,    2,  180,  178,    4,    4,
      178,  178,  167,  174,  167,  167,  171,  167,  167,  167,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  167,  176,  177,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  162,    0,    1,    0,
      169,  168,  171,  164,  163,  161,  165,  173,  173,  173,

      173,  173,  173,   12,  173,  173,  173,   19,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,   71,  173,  173,   74,   83,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  101,  173,  173,  106,
      109,  110,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      141,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      166,  176,  175,    2,    2,    2,    2,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      172,    0,  168,    5,  173,    7,  173,  173,   10,  173,
       13,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,   36,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,   50,  173,  173,
      173,  173,  173,  173,  173,  173,  173,   60,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,   78,  173,  173,   86,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  102,  173,  173,  173,  107,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  127,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  142,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  173,  173,  173,  173,  173,  173,  173,  173,  173,
       20,  173,   22,   23,   24,  173,  173,  173,   29,  173,
      173,  173,   32,   37,  173,  173,  173,  173,  173,   43,
      173,  173,  173,   48,   49,  173,  173,  173,  173,  173,
      173,  173,   58,  173,  173,   62,   63,  173,  173,   66,
      173,   68,   69,  173,  173,  173,  173,  173,  173,   82,
      173,   85,   87,   88,  173,   90,  173,  173,   93,  173,
      173,  173,  173,  173,  104,  173,  173,  173,  173,  173,

      114,  173,  173,  117,  173,  173,  173,  173,  173,  173,
      173,  173,  129,  130,  173,  173,  173,  173,  173,  137,
      138,  139,  173,  144,  173,  173,  173,  173,  173,  173,
      173,  173,  153,  173,  155,  173,  157,  158,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,    6,    8,  173,
       11,  173,   15,  173,  173,  173,  173,  173,  173,  173,
      173,  173,   31,  173,  173,  173,  173,  173,  173,   42,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
       57,   59,  173,  173,   65,  173,   70,   72,  173,   75,

       76,  173,  173,  173,  173,   89,   91,  173,   94,   95,
      173,   98,  173,  173,  173,  173,  111,  112,  173,  173,
      173,  173,  173,  120,  173,  173,  173,  173,  128,  173,
      173,  173,  134,  173,  173,  173,  173,  146,  173,  173,
      173,  150,  173,  173,  173,  156,  159,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  173,
       14,  173,   17,  173,  173,  173,   25,   27,  173,   30,
      173,  173,  173,  173,  173,   41,  173,   45,  173,   47,
       51,   52,  173,   54,  173,  173,   61,   64,   67,   73,
       77,  173,  173,  173,   84,   92,   96,   99,  173,  103,
      173,  108,  173,  173,  173,  118,  173,  173,  122,  124,
      126,  173,  132,  173,  135,  173,  173,  173,  173,  147,

      148,  149,  151,  173,  173,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,    9,   16,   18,   21,  173,   26,   28,
      173,  173,  173,   39,   40,  173,  173,   53,   55,   56,
       79,  173,  173,   97,  100,  173,  173,  115,  116,  173,

      173,  123,  125,  173,  133,  173,  173,  173,  173,  152,
      154,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  173,   33,   35,  173,   44,   46,  173,   81,  105,
      173,  119,  121,  131,  173,  173,  173,  145,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  173,   34,  173,
       80,  173,  136,  140,  173,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    0,    0,   38,  113,  173,    2,
        2,    2,    2,    2,    0,    0,  143,    2,    2,    2,
        0,    0,    2,    2,    0,    0,    2,    2,    0,    0,
        2,    2,    0,    0,    2,    2,    0,    0,    2,    2,
        0,  160,    2,    2,    0,    2,    0,    2,  170,    2,
        0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_uint16_t yy_base[1259] =
    {   0,
        0,    0,  727,  703,   76,    0,  709, 8335,  151,  153,
      687,    0, 8335, 8335,  149,  148,  160,  159,  685,  637,
      156,  156,  165,  181,  192,  243,  173,  220,  253,  152,
      171,  215,  245,  248,  289,  288,    0,  269,  335,  378,
      298,  317,  206,  173,  558,    0,  622,    0,  183,  247,
      578,  576,    0,    0,  239,  366,  437,  240,  522,  521,
      456,  532,  586,  638,  686,  738,  370,  444,  785,  452,
      518,  519,  520,  836,  883,  934,  534,  573,  983, 1035,
      618,  640,  688,  574,  459,  265, 8335,  524, 8335,  516,
      948,  975, 1101, 8335, 8335, 8335, 8335,    0,  249,  255,

      352,  367,  280,  301,  445,  301,  294,    0,  330,  319,
      526,  375,  438,  743,  463,  353,  366,  366,  388,  434,
      749,  432,  434,  451,  481,  507,  524,  561,  566,  571,
      578,  575,    0,  588,  584,  695,  588,  604,  608,  629,
      633,  792,  630,  636,  637,  632,  684,  642,  657,  661,
        0,  685,  682,  688,  707,  752,  786,  714,  733,  743,
      791,  800,  766,  806,  790,  811,  811,  830,  812,  806,
      807,  828,  843,  843,  839,  841,  855,  858,  845,  865,
     8335,    0, 8335,    0,  343,    0,  522,    0,  513, 1111,
     1121, 1132,    0,    0,    0,    0,  978,  997, 1022, 1118,

     1169, 1121, 1165, 1215, 1168, 1208, 1221, 1253, 1257, 1297,
     1265, 1309, 1361, 1308, 1357, 1401, 1358, 1410, 1416, 1465,
     1452, 1463, 1406, 1474, 1506, 1506, 1518, 1519, 1550, 1554,
     1563, 1594, 1607, 1612, 1661, 1612, 1647, 1652, 1681, 1729,
     1781, 1679, 1707, 1773, 1782, 1822, 1825, 1846, 1869, 1838,
     1882, 1905, 1918, 1926, 1734, 1954, 1967, 1973, 2003, 2052,
     2025, 1747, 2064, 2065, 2103, 2100, 2134, 2016, 2125, 2154,
     2206, 2193, 2178, 2208, 2237, 2248, 2260, 2286, 2298,    0,
     8335,  510, 1158,    0,  862,    0,  864,  859,    0,  882,
        0,  876,  890,  880,  896,  894,  908, 1171,  905,  906,

      936,  931,  930,  956,  958, 1006,  970,  978,  988, 1004,
     1036, 1042, 1041, 1028, 1049, 1036, 1050,    0, 1056, 1054,
     1128, 1115, 1124, 1126, 1159, 1180, 1197, 1211, 1215, 1220,
     1235, 1220, 1244, 1266, 1258, 1270, 1295, 1297, 1314, 1318,
     1320, 1412, 1307, 1316,    0, 1311, 1355, 1354, 1361, 1458,
     1359, 1361, 1353, 1366, 1397,    0, 1419, 1411, 1407, 1417,
     1468, 1473, 1512, 1508, 1513, 1519, 1524, 1552, 1545, 1559,
     1564, 1578, 1573, 1593,    0, 1589, 1596, 1604, 1611, 1621,
     1622, 1662, 1662, 1662, 1681, 1705,    0, 1714, 1736, 1773,
     1721, 1746, 1737, 1743, 1777, 1775, 1783, 1790, 1805, 1798,

        0,  508, 2363, 2262, 2356, 2357, 2358, 2296, 2356, 2400,
     2372, 2411, 2412, 2447, 2425, 2454, 2457, 2506, 2505, 2497,
     2519, 2547, 2555, 2573, 2592, 2609, 2608, 2616, 2560, 2641,
     2643, 2667, 2669, 2693, 2705, 2707, 2733, 2746, 2751, 2759,
     2787, 2785, 2794, 2829, 2813, 2841, 2856, 2881, 2882, 2891,
     2917, 2926, 2940, 2946, 2975, 2978, 3004, 3003, 3016, 3028,
     3029, 3042, 3054, 3073, 3079, 3097, 3090, 3122, 3124, 3176,
     3154, 3188, 3200, 3214, 3222, 3240, 3258, 3265, 3279, 3293,
     3304, 3318, 3336, 3343, 3357, 3373, 3387, 3403, 3427, 3445,
     3431, 3456, 3470, 3478, 3492, 3500, 3514, 3538, 3543, 3559,

     3573, 3589, 3613, 3597, 3627, 3640, 3652, 3667, 3688, 3694,
     3716, 3742, 3730, 3741, 3774, 3783, 3797, 3823, 3837, 3841,
      500, 1808, 1833, 1830, 1855, 1873, 1881, 1894, 1890, 1907,
        0, 1913,    0,    0, 1915, 1921, 1926, 1930,    0, 1929,
     1934, 1969, 1963,    0, 1977, 1983, 1981, 1989, 2019, 2014,
     2030, 2026, 2039,    0,    0, 2068, 2070, 2066, 2074, 2094,
     2123, 2122,    0, 2113, 2136,    0,    0, 2140, 2128,    0,
     2135,    0, 2143, 2167, 2174, 2171, 2183, 2194, 2234,    0,
     2204,    0,    0,    0, 2217,    0, 2235, 2254,    0, 2257,
     2297, 2262, 2287, 2300,    0, 2316, 2316, 2331, 2359, 2365,

        0, 2378, 2414,    0, 2409, 2413, 2412, 2431, 2425, 2441,
     2471, 2475,    0,    0, 2474, 2485, 2483, 2511, 2512,    0,
        0, 2527, 2544,    0, 2563, 2554, 2555, 2580, 2566, 2610,
     2621, 2652,    0, 2643,    0, 2683,    0, 2681,  492, 3877,
     3885, 3885, 3910, 3929, 3929, 3924, 3945, 3958, 3973, 3988,
     3997, 4002, 4027, 4032, 4041, 4071, 4056, 4085, 4085, 4116,
     4127, 4130, 4146, 4170, 4174, 4188, 4218, 4226, 4244, 4261,
     4268, 4277, 4286, 4310, 4319, 4333, 4363, 4366, 4387, 4388,
     4414, 4416, 4442, 4440, 4464, 4476, 4494, 4502, 4474, 4521,
     4529, 4546, 4568, 4573, 4577, 4613, 4658, 4622, 4655, 4666,

     4669, 4699, 4702, 4713, 4732, 4752, 4757, 4760, 4767, 4803,
     4807, 4815, 4830, 4856, 4855, 4884, 4885, 4909, 4910, 4938,
     4939, 4963, 4964, 4992, 4993, 5017, 5018, 5043, 5049, 5066,
     5071, 5096, 5073, 5101, 5120, 5125, 5149, 5150, 5164, 5164,
     5185, 5199, 5218, 5215, 5239, 5267, 5253, 5291, 5292, 5311,
     5324, 5336, 5349, 5350, 5362, 5381,  459,    0,    0, 2678,
        0, 2701,    0, 2712, 2706, 2735, 2742, 2751, 2748, 2747,
     2765, 2810,    0, 2821, 2819, 2836, 2857, 2850, 2867,    0,
     2873, 2880, 2887, 2907, 2911, 2906, 2915, 2930, 2961, 2986,
        0,    0, 2979, 2993,    0, 3042,    0,    0, 3030,    0,

        0, 3042, 3068, 3143, 3071,    0,    0, 3103,    0,    0,
     3103, 3094, 3122, 3121, 3137, 3126,    0,    0, 3146, 3135,
     3139, 3162, 3162,    0, 3174, 3182, 3195, 3191,    0, 3208,
     3229, 3234, 3222, 3233, 3233, 3268, 3274,    0, 3276, 3283,
     3283,    0, 3276, 3298, 3300,    0,    0,  457, 5394, 5397,
     5405, 5435, 5448, 5457, 5460, 5486, 5512, 5499, 5540, 5538,
     5547, 5576, 5590, 5591, 5616, 5604, 5630, 5648, 5655, 5645,
     5680, 5683, 5698, 5690, 5712, 5734, 5737, 5762, 5714, 5763,
     5787, 5788, 5801, 5816, 5830, 5843, 5866, 5874, 5885, 5909,
     5918, 5927, 5951, 5971, 5960, 5969, 6000, 6013, 6014, 6044,

     6055, 6057, 6086, 6102, 6099, 6143, 6140, 6144, 6184, 6192,
     6195, 6197, 6236, 6241, 6249, 6254, 6293, 6295, 6308, 6307,
     6333, 6347, 6352, 6197, 6352, 6388, 6404, 6412, 6295, 6405,
     6455, 6437, 6456, 6471, 6492, 6513, 6516, 6532,  452, 3316,
        0, 3317,    0, 3324, 3342, 3332, 3334,    0, 3351,    0,
     3347, 3362, 3380, 3379, 3385,    0, 3405,    0, 3406,    0,
        0,    0, 3416,    0, 3411, 3409,    0,    0,    0,    0,
        0, 3417, 3435, 3462,    0,    0, 3470,    0, 3482,    0,
     3498,    0, 3480, 3499, 3486,    0, 3510, 3530, 3522, 3529,
        0, 3535,    0, 3547,    0, 3560, 3568, 3569, 3557,    0,

        0,    0,    0, 3573, 3583,  427, 6560, 6561, 6560, 6576,
     6595, 6615, 6623, 6625, 6644, 6660, 6668, 6674, 6704, 6718,
     6710, 6746, 6759, 6760, 6790, 6804, 6801, 6825, 6834, 6852,
     6854, 6879, 6888, 6897, 6928, 6932, 6941, 6972, 6976, 6984,
     7023, 7020, 7025, 7025, 7066, 7067, 7070, 7113, 7110, 7116,
     7133, 7161, 7163, 7187, 7195, 7170, 7214, 7222, 7230, 7238,
     7266, 7274, 7282, 7290, 7323, 7320, 7331, 7344, 7367, 7375,
     7386, 7405,  428,    0,    0,    0,    0, 3602,    0,    0,
     3610, 3618, 3625,    0,    0, 3626, 3613,    0,    0,    0,
        0, 3644, 3650,    0,    0, 3645, 3664,    0,    0, 3650,

     3660,    0,    0, 3663,    0, 3669, 3682, 3681, 3700,    0,
        0,  415, 7416, 7424, 7435, 7454, 7474, 7479, 7482, 7487,
     7523, 7532, 7531, 7557, 7571, 7572, 7585, 7586, 7611, 7620,
     7639, 7627, 7646, 7665, 7676, 7671, 7693, 7705, 7719, 7727,
     7745, 7753, 7771, 7779, 7801, 7815, 7829, 7820, 7854, 7855,
      416, 3705, 3718,    0, 3725,    0,    0, 3736,    0,    0,
     3745,    0,    0,    0, 3748, 3769, 3782,    0,  415, 7880,
     7880, 7889, 7922, 7925, 7931, 7966, 7969, 7975, 8010, 8011,
     8019, 8052, 8054, 8069, 8072, 8104,  411,  348,    0, 3791,
        0, 3780,    0,    0, 3786,  409, 8136, 8117, 8118, 8158,

     8152, 8163, 8187, 8180,  403, 3859,    0,    0, 3789,  372,
     3970, 8210, 8212, 8217,  356, 3804,    0,  336, 3818, 8231,
      328, 3809,  326, 3813,  323, 3825,  321, 3827,  288, 3848,
      278, 3857,  273, 3857,  242, 3861,  241, 3878,  239, 3898,
      226, 8335,  223,    0,  196,  191,  181,  176, 8335,    0,
     8335, 8304, 8309,  186, 8314, 8319, 8324, 8329
    } ;

static yyconst flex_int16_t yy_def[1259] =
    {   0,
     1251,    1, 1252, 1252, 1251,    5, 1251, 1251, 1251, 1251,
     1251, 1253, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1251, 1255, 1251, 1256, 1256, 1251,
     1256, 1257, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1258, 1258,   62,   62,   62,   62,   65,   62,   65,   62,
       62,   62,   62,   62,   65,   65,   65,   62,   62,   62,
       65,   62,   62,   62, 1256, 1251, 1251, 1253, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1251, 1255, 1251, 1256, 1256, 1256, 1257, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256,   62,   62,   62,   65,

       65,   65,   65,   65,   65,   62,   62,   65,   65,   65,
       62,   62,   65,   65,   65,   62,   65,   65,   65,   62,
       65,   65,   62,   62,   62,   65,   62,   62,   65,   65,
       65,   65,   62,   62,   65,   65,   62,   62,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   62,   65,   65,   65,   65,   65,
       62,   62,   62,   62,   62,   62,   65,   62,   62,   62,
       62,   62,   62,   62,   65,   62,   62,   62,   62, 1256,
     1251, 1251, 1251, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1256, 1256, 1256,   62,   62,   62,   62,   65,   65,   65,
       65,   62,   62,   62,   62,   65,   65,   62,   62,   62,
       62,   62,   62,   62,   65,   62,   65,   65,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   65,   65,   65,   65,   62,   62,   62,   62,   65,
       65,   65,   65,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   65,   65,   65,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   65,   65,   65,
       62,   62,   62,   65,   65,   65,   65,   65,   65,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   65,   65,

       65,   65,   65,   65,   65,   62,   62,   65,   65,   62,
       62,   62,   65,   65,   65,   65,   65,   65,   65,   65,
     1251, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1256,   65,
       65,   62,   62,   62,   65,   62,   65,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   62,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   65,
       65,   62,   62,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   62,   62,   62,   65,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   65,   65,   62,
       62,   62,   65,   62,   62,   62,   62,   62,   62,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   62,   62,
       62,   62,   62,   62,   62,   65, 1251, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1256,   65,   65,
       65,   65,   62,   62,   62,   62,   62,   62,   62,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   65,   62,
       62,   62,   62,   65,   62,   62,   62,   62,   65,   62,
       62,   62,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   62,   65,   65,   65,   65,   65,   65,

       65,   62,   65,   65,   65,   65,   65,   65,   65,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   65,   65,   65,   65,   65,   65,   62,
       62,   62,   62,   65,   65,   65,   65,   65, 1251, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1256,   62,   62,   65,   65,
       65,   62,   62,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   62,
       62,   65,   65,   65,   65,   65,   65,   65,   65,   62,
       62,   62,   62,   65,   65,   65,   65,   65,   65,   65,
       62,   62,   62,   62,   62,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65, 1251, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1256,   65,   65,   65,   65,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   65,   65,   65,   65,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1251, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1256,   62,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   62,   62,   62,   62, 1251, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1256,   62,   62,   62,   62,

       65,   65,   65,   62, 1251, 1251, 1254, 1254, 1254, 1256,
     1256,   62,   62,   65, 1251, 1251, 1254, 1256, 1256,   65,
     1251, 1251, 1256, 1256, 1251, 1251, 1256, 1256, 1251, 1251,
     1256, 1256, 1251, 1251, 1256, 1256, 1251, 1251, 1256, 1256,
     1251, 1251, 1256, 1256, 1251, 1256, 1251, 1256, 1251, 1256,
        0, 1251, 1251, 1251, 1251, 1251, 1251, 1251
    } ;

static yyconst flex_uint16_t yy_nxt[8412] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   37,   44,   37,    8,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   37,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   48,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   77,   84,
       77,   85,   86,   86,   86,   86,   89,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   90,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
       95,   99,  105,  100,  185,   86,  106,  109,  138,  101,
       98,  102,  107, 1250,  110,  103,  104,  139, 1249,  180,

     1248,  111,  108,  113,  112, 1247,  128,  114,   99,  105,
      100,  115,  129,  106,  109,  138,  101,  116,  102,  107,
      117,  110,  103,  104,  139,  118,  180,  119,  111,  108,
      113,  112,  120,  128,  114,  178,  179,  121,  115,  129,
     1246,  140,  130, 1245,  116,  141,  188,  117,   86,   86,
      131,  142,  118, 1243,  119, 1241,  132,  189, 1239,  120,
      193,  194,  178,  179,  121,  122,   86,   86,  140,  130,
      146,  143,  141,  123,  284,  144,  124,  131,  142,  125,
      133,  145,  126,  132,  147,  127,  134,  135,  136, 1237,
      148,  149,  122,  137, 1235,  157,  285,  146,  143,  158,

      123,  284,  144,  124, 1233,  159,  125,  133,  145,  126,
      154,  147,  127,  134,  135,  136,  150,  148,  149,  290,
      137,  155,  157,  285,  151,  291,  158,  156,  152,  295,
      296,  153,  159,  173, 1231,  174, 1229,  154,  175,  176,
     1227,  299, 1225,  150,  185,   86,  290,  177,  155, 1206,
     1206,  151,  291, 1223,  156,  152,  295,  296,  153,  160,
      173,  161,  174,  297,  162,  175,  176,  163,  299,  164,
      298,  165,  166, 1221,  177,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  286,  160, 1218,  161,  288,
      297,  162,  289,  287,  163,  315,  164,  298,  165,  166,

      167,  304,  316,  227,  168,  197,  317,  169,  170,  228,
      197,  305,  286,  318,  171,  197,  288,  172, 1215,  289,
      287, 1210,  315, 1205, 1196, 1187, 1169,  167,  304,  316,
      227,  168,  197,  317,  169,  170,  228,  197,  305, 1151,
      318,  171,  197, 1112,  172,  191,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  184,  184,  319,  184,
      184,  184,  184,  184,  184,  325,  229,  326, 1073, 1006,
      197,  939,  292,  293,  230,  184,  184,  184,  197,  306,
      231,  198,  197,  199,  307,  319,  294,  327,  237,  200,
      197,  201,  325,  229,  326,  202,  203,  197,  197,  292,

      293,  230,  313,  314,  848,  197,  306,  231,  198,  197,
      199,  307,  757,  294,  327,  237,  200,  197,  201,  639,
      328,  521,  202,  203,  402,  197,  401,  282,  281,  313,
      314,  184,  184,  184,  280,  184,  184,  184,  184,  184,
      184,  196,  195,  329,  238,  239,  242,  328,  197,  240,
      243,  184,  184,  184,  197,  241,  244,  330,  204,  300,
      301,  302,  205,  303,  197,  197,  197,  197,  206,  197,
      329,  238,  239,  242,  197,  197,  240,  243,  207,  197,
      184,  197,  241,  244,  330,  204,  300,  301,  302,  205,
      303,  197,  197,  197,  197,  206,  197,  331,  186,  256,

      279,  197,  332,  257,  197,  207,  197,  184,  208,  258,
      197,  333,  197,  335,  334,  209,  197,  336,  337,  197,
      197,  338,  210,  343,  331,  211,  256,  279,  183,  332,
      257,  197,  197,  181,  344,  208,  258,  197,  333,  197,
      335,  334,  209,  197,  336,  337,  197,  197,  338,  210,
      343,  197,  211,  272,  345,  273,  346,   97,  274,  197,
      212,  344,  275,  197,  213,  347,  197,  348,  214,  352,
      276,  353,  354,  355,  215,  358,  197,  216,  197,  359,
      272,  345,  273,  346,  197,  274,  197,  212,  360,  275,
      197,  213,  347,  197,  348,  214,  352,  276,  353,  354,

      355,  215,  358,  197,  216,   96,  359,   87, 1251,   47,
      361,  197,  197,  197,  197,  360,  197,  277,  278,  217,
      339,  218,  197,  362,  197,  356,  219,  363,  357,  364,
      340,  220,  197,   47,  197,  341,  342,  361, 1251,  197,
     1251,  197,  370,  197,  277,  278,  217,  339,  218,  197,
      362,  197,  356,  219,  363,  357,  364,  340,  220,  197,
      221,  197,  341,  342,  197,  308,  371,  309,  222,  370,
      310,  223,  372,  320,  224,  321,  311,  225,  365,  322,
      226, 1251,  366,  312,  197, 1251,  323,  221, 1251, 1251,
      324,  197,  308,  371,  309,  222,  378,  310,  223,  372,

      320,  224,  321,  311,  225,  365,  322,  226,  367,  366,
      312,  197,  232,  323,  349,  373,  350,  324,  233,  234,
      235,  368,  376,  378,  374,  236,  369,  351,  379,  380,
      197, 1251,  375,  381,  382,  367,  377, 1251,  385,  232,
      386,  349,  373,  350,  387,  233,  234,  235,  368,  376,
      388,  374,  236,  369,  351,  379,  380,  197,  245,  375,
      381,  382,  197,  377,  383,  385,  197,  386,  392,  393,
      389,  387,  246,  390,  394,  384,  391,  388,  247,  248,
      395,  396,  197, 1251,  398,  245,  399,  400,  522,  197,
      523,  383,  524,  197,  397,  392,  393,  389, 1251,  246,

      390,  394,  384,  391,  525,  247,  248,  395,  396,  197,
      249,  398,  526,  399,  400,  522,  197,  523,  250,  524,
      527,  397,  251,  197,  528,  252,  529,  530,  197, 1251,
     1251,  525, 1251, 1251, 1251, 1251, 1251,  249, 1251,  526,
     1251,  531, 1251,  197,  535,  250, 1251,  527,  536,  251,
      197,  528,  252,  529,  530,  197,  253,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,  254,  531,  197,
      537,  535,  538,  255,  197,  536,  539, 1251,  540,  197,
     1251, 1251, 1251,  253,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  254, 1251,  197,  537,  541,  538,

      255,  197, 1251,  539,  197,  540,  197,  259,  197,  260,
      544,  545,  261,  197,  197,  262, 1251,  263,  546,  264,
      265, 1251,  404,  197,  197,  541,  547,  197,  542,  197,
     1251,  197,  543,  197,  259,  197,  260,  544,  545,  261,
      197,  197,  262,  197,  263,  546,  264,  265,  197,  404,
      197,  197,  197,  547,  197,  542,  197,  266,  197,  543,
      197,  267,  548,  405,  268,  269,  550,  551,  197,  552,
      197,  270,  553,  554,  271,  197,  555,  549,  556,  197,
      557,  197, 1251, 1251,  266,  197, 1251, 1251,  267,  548,
      405,  268,  269,  550,  551,  197,  552, 1251,  270,  553,

      554,  271, 1251,  555,  549,  556, 1251,  557,  197,   92,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      191,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  406,  558,  197,  197,  559,  197,  560,  197,  407,
      410,  197, 1251,  197, 1251,  561,  197,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283, 1251,  406,  558,
      197,  197,  559,  197,  560,  197,  407,  410,  197,  411,
      197,  408,  561,  197,  409,  532,  415,  533,  197,  562,

      197,  197,  197,  197,  197,  197,  563, 1251,  197,  197,
      197, 1251,  534,  197,  197, 1251,  411, 1251,  408,  564,
     1251,  409,  532,  415,  533,  197,  562,  197,  197,  197,
      197,  197,  197,  563,  197,  197,  197,  197,  197,  534,
      197,  197,  412,  413,  416,  565,  564,  197,  197,  566,
      197,  197, 1251,  567,  197,  197,  414,  197,  568, 1251,
      197,  197,  569, 1251, 1251,  197, 1251,  197, 1251,  412,
      413,  416,  565,  570,  197,  197,  566,  197,  197,  419,
      567,  197,  197,  414,  197,  568,  417,  197,  197,  569,
      197,  424,  197,  418,  197,  197,  571,  197,  197,  572,

      570,  425,  197, 1251, 1251, 1251,  419, 1251, 1251,  573,
     1251,  197, 1251,  417, 1251,  197, 1251,  197,  424,  197,
      418, 1251,  197,  571,  197,  197,  572,  574,  425,  197,
      420,  421,  422,  575,  423,  197,  573,  197,  197,  197,
      576,  197,  197,  197,  577,  197,  578,  433,  434,  581,
      426,  582,  583,  197,  574,  427, 1251,  420,  421,  422,
      575,  423,  197, 1251,  197, 1251,  197,  576,  197,  197,
      197,  577,  197,  578,  433,  434,  581,  426,  582,  583,
      197,  584,  427,  428,  585,  429,  586,  589,  430,  590,
      197,  197,  197,  197,  431,  591,  197,  197,  437,  435,

     1251,  432,  197,  197, 1251, 1251,  197,  592,  584, 1251,
      428,  585,  429,  586,  589,  430,  590,  197,  197,  197,
      197,  431,  591,  197,  197,  437,  435,  197,  432,  197,
      197,  197,  197,  197,  592,  438,  197,  436,  579,  593,
      439,  594,  447,  197,  595,  197,  596,  197,  580,  197,
      197,  197,  197, 1251,  197,  197,  197,  597,  197,  197,
     1251,  197,  438,  197,  436,  579,  593,  439,  594,  447,
      197,  595,  197,  596,  197,  580,  197,  197,  197,  197,
      587, 1251,  197,  197,  597,  445, 1251,  197,  197,  440,
      588,  441,  197, 1251,  598,  442,  446,  197,  197,  599,

      197,  197,  443,  197,  197, 1251,  444,  587,  197, 1251,
      197,  197,  445,  448,  197, 1251,  440,  588,  441,  197,
      197,  598,  442,  446,  197,  197,  599,  197,  197,  443,
      197,  197,  197,  444,  600,  197,  197,  197,  197,  450,
      448,  197,  449,  601,  197,  197,  197,  197,  197,  197,
      602,  197,  197,  603,  451,  452, 1251,  604, 1251,  197,
     1251,  600, 1251,  197,  197,  197,  450, 1251,  197,  449,
      601,  197,  197,  197,  605,  197,  197,  602,  197,  197,
      603,  451,  452,  197,  604,  197,  606,  197,  607,  455,
      453,  197,  197,  454,  197,  197,  197,  608,  197,  197,

     1251,  605, 1251,  197,  609,  456, 1251, 1251,  197,  610,
      197, 1251,  197,  606,  197,  607,  455,  453, 1251,  611,
      454,  197,  197,  197,  608,  197,  197,  197,  612,  197,
      197,  609,  456,  197,  197,  197,  610,  457,  197,  197,
      613,  614,  197,  197,  615,  197,  611,  463,  197,  458,
     1251, 1251,  197,  197,  197,  612,  197,  197,  197, 1251,
      197,  197,  616,  617,  457,  197,  197,  613,  614,  197,
      197,  615,  197,  197,  463,  197,  458,  464,  197,  197,
      197, 1251,  197,  197,  197,  197,  459, 1251,  197,  616,
      617, 1251, 1251,  197,  197,  618,  460, 1251,  465,  619,

      197,  461,  462,  620,  464,  197,  197,  197,  466,  197,
      197,  197,  197,  459,  197,  197,  621,  197,  472,  197,
      197,  197,  618,  460,  197,  465,  619,  197,  461,  462,
      620,  622, 1251,  197,  197,  466, 1251, 1251,  197,  197,
      197,  197,  473,  621,  197,  472,  197,  197, 1251,  623,
     1251,  197,  197, 1251,  197,  197, 1251,  628,  622,  197,
      485,  467,  624,  468,  486,  197, 1251,  197,  629,  473,
      197,  625,  630,  197,  197,  197,  623,  498, 1251,  197,
      197, 1251,  197,  197,  628,  631,  197,  485,  467,  624,
      468,  486,  197,  197, 1251,  629, 1251,  197,  625,  630,

      197,  632,  197,  469,  498,  470,  197,  197,  474,  626,
      197,  627,  631,  197,  197,  197,  471,  197,  197,  633,
      197,  197,  197,  475,  634,  635,  197,  197,  632,  636,
      469, 1251,  470,  197,  637,  474,  626,  638,  627, 1251,
      197,  197,  197,  471,  197,  197,  633,  758,  197,  197,
      475,  634,  635,  197,  197,  197,  636,  197,  478, 1251,
      197,  637,  197,  476,  638,  197,  477,  197,  479, 1251,
      197,  197,  759,  197,  758, 1251,  760, 1251,  197,  197,
     1251,  197,  197,  197,  197,  478,  197,  197, 1251,  197,
      476,  197,  197,  477,  197,  479,  480,  197,  197,  759,

      197,  761,  197,  760,  197,  197,  197,  481,  197,  197,
      197, 1251,  762,  197,  197,  197,  763,  197,  197, 1251,
      764, 1251,  197,  480, 1251,  765, 1251,  197,  761,  197,
     1251,  197, 1251,  766,  481,  767,  197,  768,  197,  762,
      197,  197,  197,  763,  197,  197,  482,  764,  484,  197,
      197,  197,  765,  197,  197,  769,  770,  483,  197,  197,
      766,  197,  767,  197,  768,  197,  197,  197, 1251,  771,
      772,  197,  197,  482,  773,  484,  487,  197,  197, 1251,
      197, 1251,  769,  770,  483,  197,  197,  197,  197,  488,
      197, 1251,  774,  197,  489,  490,  771,  772,  197,  197,

      197,  773,  197,  487,  775, 1251,  491,  197,  197, 1251,
      776, 1251,  197,  197,  197, 1251,  488,  777,  197,  774,
     1251,  489,  490,  778, 1251, 1251,  197,  197, 1251,  197,
      779,  775,  492,  491,  197,  197,  197,  776,  197,  197,
      197,  780,  505,  197,  777,  197,  197,  496,  197, 1251,
      778,  197,  197,  781,  782,  197,  783,  779, 1251,  492,
     1251,  497,  197,  197, 1251,  197, 1251, 1251,  780,  505,
      197,  197,  784,  197,  496,  197,  493, 1251,  197,  197,
      781,  782,  197,  783, 1251,  494,  499,  197,  497,  197,
      197,  197,  197,  495,  197,  197, 1251,  197,  197,  784,

      197,  197, 1251,  493,  500,  785, 1251,  786,  787, 1251,
      197,  197,  494,  499,  197,  788,  789,  197,  197,  197,
      495,  197,  197,  502,  197,  501,  197,  197,  197,  197,
      197,  500,  785,  197,  786,  787,  197,  197,  197,  197,
     1251, 1251,  788,  789, 1251,  790,  197, 1251,  791,  197,
      502,  197,  501,  197,  792,  197,  197,  197,  793,  506,
      197,  197,  794,  197, 1251,  795,  197,  197,  503,  197,
      796,  197,  790,  197,  197,  791,  197, 1251,  197,  504,
      197,  792,  197,  797,  197,  793,  506, 1251,  197,  794,
      197,  507,  795,  798,  197,  503,  197,  796,  197, 1251,

      197,  197, 1251,  512,  197, 1251,  504,  197,  197, 1251,
      797,  197, 1251,  799,  197, 1251,  800,  197,  507,  197,
      798, 1251,  801,  510,  197, 1251,  511,  197,  508,  197,
      512,  197,  197,  802,  197,  197,  197,  805,  513,  197,
      799,  197,  197,  800,  197, 1251,  197, 1251,  509,  801,
      510,  197,  197,  511,  197,  508,  197, 1251,  806,  197,
      802,  197,  803,  197,  805,  513,  197, 1251,  807,  197,
      514,  197,  197,  804,  516,  509,  515,  197,  197,  197,
      808,  197,  197,  809,  197,  806,  518,  517,  197,  803,
      197,  812,  197, 1251,  197,  807,  197,  514,  197,  197,

      804,  516, 1251,  515,  197,  197,  197,  808,  197,  197,
      809,  197,  197,  518,  517,  197,  197,  197,  812,  197,
      520,  197,  197,  197,  197,  197,  813,  519,  197,  642,
      814,  197,  197,  197,  197,  197,  197,  810,  811,  197,
      815,  197,  816,  197,  197, 1251, 1251,  520, 1251,  197,
     1251,  197, 1251,  813,  519,  197,  642,  814,  197,  197,
     1251,  197, 1251,  197,  810,  811, 1251,  815,  197,  816,
      817,  197,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  640,  197,  641, 1251,  197,  197,  197,  197,
     1251,  197,  197,  197,  197, 1251,  197,  817,  818,  819,

      820,  197,  197,  197,  197,  197, 1251,  197, 1251,  640,
      197,  641,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  643,  197, 1251,  818,  819,  820,  197,  197,
      197,  197,  197,  197,  197,  197,  821,  197,  197,  197,
      197,  197,  645,  822,  197,  197, 1251,  644,  197,  643,
     1251,  197,  823,  824,  825,  647, 1251,  197,  197,  826,
      197,  197,  197,  821,  197,  197, 1251,  197,  197,  645,
      822,  197,  197,  197,  644,  197,  827,  197,  197,  823,
      824,  825,  647,  197,  197,  197,  826,  648,  197,  197,
      649,  646,  197,  197,  197,  828, 1251,  197,  197,  197,

      197,  829,  197,  827,  197, 1251, 1251,  830, 1251, 1251,
      197,  831, 1251,  832,  648, 1251,  197,  649,  646,  197,
      197,  197,  828,  197,  197, 1251,  197,  197,  829,  197,
      650,  197,  651,  197,  830,  197,  197,  833,  831,  654,
      832,  197,  197,  197,  653,  197, 1251,  652,  834,  197,
      197,  197,  197,  655,  197,  197, 1251,  650,  197,  651,
      197, 1251,  197,  197,  833,  197,  654,  835,  197,  197,
      197,  653,  197,  197,  652,  834,  197,  197,  197,  197,
      655,  197,  197,  197,  836,  197,  197,  837,  656,  838,
      664,  197,  197,  197,  835,  658,  197,  839, 1251,  197,

      197,  657,  840,  197,  197, 1251,  197,  841,  197,  197,
      197,  836,  197,  197,  837,  656,  838,  664,  197,  197,
      197, 1251,  658,  197,  839,  197,  197,  197,  657,  840,
      197,  660,  659,  197,  841,  661,  197,  197,  842,  197,
     1251,  197, 1251,  197, 1251,  197,  197,  843,  662,  663,
     1251,  197,  197,  197,  197,  197,  197, 1251,  660,  659,
     1251,  197,  661,  665,  197,  842,  197,  197,  197,  666,
      197,  197,  197,  197,  843,  662,  663,  197,  197,  197,
      197,  844,  197,  197,  667,  845, 1251,  197,  197,  197,
      665,  668, 1251,  197,  197,  669,  666,  197,  197,  197,

      197, 1251, 1251,  197,  197,  197,  197, 1251,  844,  846,
     1251,  667,  845,  197,  197,  197,  197, 1251,  668,  197,
      197,  847,  669,  197,  197,  940,  197,  941,  671,  197,
      197,  197,  197,  197,  670,  197,  846,  197,  942,  197,
      197,  197,  197,  197,  672, 1251,  197,  943,  847, 1251,
      197,  197,  940,  197,  941,  671,  197,  944,  197,  673,
      197,  670,  197,  197,  197,  942,  197,  945,  197,  197,
      197,  672,  197,  674,  943,  946,  197,  197,  197,  197,
      197,  197,  197,  947,  944,  675,  673,  197,  948,  197,
      197, 1251,  197, 1251,  945,  197,  197,  197, 1251,  197,

      674,  949,  946,  197,  197,  197,  197, 1251,  197,  197,
      947,  676,  675,  197,  197,  948,  197,  197,  197,  197,
      197, 1251,  197,  197,  197,  677, 1251,  678,  949,  197,
      197, 1251,  197,  197,  197, 1251,  950, 1251,  676,  197,
      197, 1251, 1251,  951,  197,  197,  197,  197,  197,  952,
      197, 1251,  677,  680,  678, 1251,  197,  197,  197, 1251,
      197,  197,  197,  950,  197, 1251,  197,  681,  679,  197,
      951,  197,  953,  197,  197,  197,  952,  197,  682,  954,
      680, 1251,  197,  955, 1251,  197,  197,  197, 1251,  197,
     1251,  197,  197,  956,  681,  679,  197, 1251,  197,  953,

     1251,  197,  197,  957,  197,  682,  954,  197,  197,  197,
      955,  197,  197,  197,  197,  683,  684,  197,  197,  197,
      956,  958,  959, 1251,  685, 1251,  197,  197,  197,  197,
      957,  197, 1251,  960,  197,  197,  197,  961,  197,  197,
      686, 1251,  683,  684,  197,  197, 1251,  962,  958,  959,
      197,  685,  197,  197,  197,  197,  963,  197,  197,  197,
      960,  197,  197,  197,  961, 1251,  197,  686,  687,  688,
      964,  197,  197,  197,  962,  197,  689,  197, 1251,  197,
      197, 1251,  197,  963,  197,  197,  197, 1251,  197,  197,
     1251,  965,  197,  197, 1251,  687,  688,  964,  197,  197,

      197,  197,  197,  689,  197,  197, 1251,  197,  197,  197,
      966,  197,  197, 1251,  197, 1251,  690,  691,  965,  197,
      967,  197, 1251, 1251,  197, 1251,  968, 1251,  197,  197,
      197,  197,  197,  197,  197,  197,  692,  966,  197,  693,
      197,  197,  694,  690,  691, 1251,  197,  967,  197,  197,
      197,  197,  197,  968,  695,  696,  197,  197,  197,  197,
      197,  197,  197,  692,  197,  197,  693,  197,  697,  694,
      969,  970,  197,  197,  197,  197,  197,  197,  698,  197,
      197,  695,  696,  971,  197,  197,  197, 1251,  197,  197,
      197,  197,  197, 1251,  972,  697,  699,  969,  970,  197,

      197,  197,  197, 1251,  975,  698,  197,  197,  700, 1251,
      971,  197,  197,  197,  197,  197,  702,  197,  197,  197,
      197,  972, 1251,  699,  197, 1251,  197,  197,  976,  977,
      197,  975,  197,  197,  978,  700,  197,  197,  701,  197,
      197,  197,  197,  702,  979,  197,  197,  197,  197,  704,
      197,  197,  703,  197,  197,  976,  977,  197,  197,  197,
      197,  978,  980,  197,  197,  701,  981,  982,  197,  197,
      197,  979,  983, 1251,  984,  197,  704,  197,  985,  703,
      197,  197,  707,  973,  197,  197,  974,  197,  986,  980,
      197, 1251,  987,  981,  982,  197,  988,  197,  705,  983,

      197,  984,  197, 1251,  989,  985,  197,  197,  706,  707,
      973,  197,  197,  974,  197,  986,  708,  197,  197,  987,
      990, 1251,  197,  988,  197,  705,  197,  197, 1251,  197,
      197,  989,  991,  197,  197,  706,  197, 1251,  992,  197,
      197,  197,  709,  708,  197,  197,  197,  990,  197,  197,
      197,  197,  197,  197,  993,  710,  994,  197,  197,  991,
      197,  197,  995,  197,  711,  992,  197,  197,  197,  709,
      197,  197,  996,  197,  997,  197,  197,  197, 1251,  197,
      712,  993,  710,  994,  197,  197,  197,  197,  197,  995,
      998,  711, 1251,  197,  197,  197,  999,  197,  713,  996,

      197,  997, 1000,  197,  197,  197, 1251,  712, 1001, 1002,
      197,  197,  197,  197,  197,  197, 1003,  998,  714,  197,
     1004,  197, 1005,  999,  197,  713,  197,  197,  197, 1000,
      716,  197,  197,  715,  197, 1001, 1002,  197,  197,  197,
      197,  197, 1074, 1003,  717,  714,  197, 1004,  197, 1005,
      197,  197, 1075,  197,  197,  197, 1251,  716,  718, 1076,
      715,  197,  197, 1251,  197,  197,  197,  197, 1077, 1074,
     1251,  717,  197, 1078, 1079,  197,  197,  197,  719, 1075,
     1251,  197,  197,  197, 1080,  718, 1076, 1081,  197,  197,
      197,  197,  197,  197,  720, 1077, 1082,  197, 1251,  197,

     1078, 1079,  197,  197, 1083,  719,  197,  721,  197,  197,
      197, 1080, 1084,  197, 1081,  197, 1251,  197,  197,  197,
      722,  720,  197, 1082,  197,  723, 1085,  197, 1086,  197,
     1087, 1083,  197,  197,  721,  197,  197, 1251,  197, 1084,
      197, 1251, 1088,  197, 1251,  197, 1089,  722,  197,  197,
     1090, 1251,  723, 1085,  197, 1086, 1091, 1087, 1251,  197,
      197, 1092,  197,  197,  726,  197,  197,  197,  724, 1088,
      197,  197,  197, 1089,  725,  197,  197, 1090,  197, 1251,
      197, 1251,  727, 1091, 1093,  197,  197,  197, 1092,  197,
      197,  726,  197,  197,  197,  724,  197, 1251,  197,  197,

      197,  725,  197,  197,  729,  197,  728,  197,  197,  727,
     1094, 1093,  197,  197,  197, 1095,  197,  197,  197,  197,
     1096, 1097,  197,  197,  197, 1098,  197,  197,  197,  197,
      197,  729, 1099,  728, 1100,  197,  197, 1094,  197,  730,
      197,  197, 1095,  197,  197,  197,  197, 1096, 1097,  197,
      197,  197, 1098,  197, 1101,  197, 1251,  197,  731, 1099,
      197, 1100, 1102,  197,  197,  197,  730,  197,  197, 1103,
     1104,  197, 1251,  197,  197,  732,  733,  197,  197, 1251,
     1105, 1101, 1106,  197,  197,  731, 1251,  197,  197, 1102,
     1107,  197,  197, 1108,  197,  197, 1103, 1104, 1109,  197,

      734,  197,  732,  733,  197,  197,  197, 1105,  197, 1106,
      197,  197, 1110,  197,  735,  197, 1111, 1107,  197,  197,
     1108,  197,  736, 1251,  197, 1109,  197,  734, 1152,  197,
      197,  197,  197,  197,  197,  197, 1153,  197,  738, 1110,
      197,  735,  197, 1111, 1154,  197,  197, 1155,  197,  736,
      737,  197, 1156,  197, 1157, 1152,  197,  197,  197,  197,
      197,  197,  739, 1153,  197,  738,  740,  197, 1158,  197,
      197, 1154,  197,  197, 1155,  197,  197,  737,  197, 1156,
      197, 1157,  197, 1159, 1160,  197,  197,  197,  197,  739,
     1161, 1162, 1163,  740,  197, 1158, 1251,  197,  197,  197,

      197, 1251,  741,  197, 1164,  197, 1251,  197, 1165,  197,
     1159, 1160,  197,  197,  742,  197, 1166, 1161, 1162, 1163,
      197,  197, 1167,  743,  197,  197, 1168,  197,  197,  741,
      744, 1164,  745,  197,  197, 1165, 1251, 1251, 1251,  197,
      197,  742,  197, 1166, 1188, 1251,  197,  197,  197, 1167,
      743,  197,  746, 1168, 1251,  197, 1251,  744, 1189,  745,
      197, 1251,  197,  197,  747,  748, 1190,  197,  197,  197,
      197, 1188,  197,  197,  197,  197,  197, 1191,  197,  746,
     1251,  197, 1251,  749, 1192, 1189,  197, 1251,  197,  197,
      197,  747,  748, 1190, 1193,  197, 1251,  197,  750,  197,

     1251,  197,  197,  197, 1191,  197, 1194,  197,  197,  197,
      749, 1192, 1195,  197,  197,  197,  197, 1207,  197,  197,
     1208, 1193, 1209,  197, 1217,  750, 1222,  751,  197, 1251,
      197, 1251,  197, 1194,  197, 1251,  197,  197,  752, 1195,
     1224,  197,  197,  197, 1207,  197,  197, 1208, 1226, 1209,
      197, 1217, 1228, 1222,  751,  197,  197,  197,  753,  197,
     1206, 1206,  754,  197,  197,  752,  755, 1224,  197,  197,
      197, 1230,  197, 1232,  197, 1226,  197,  197, 1234, 1228,
      756,  197,  197,  197, 1251,  753,  197, 1236, 1251,  754,
      197, 1251, 1238,  755, 1251,  197, 1240,  197, 1230,  197,

     1232,  197, 1216,  197,  197, 1234, 1242,  756,  197,  197,
      197,  197,  197,  197, 1236,  197,  849,  197,  197, 1238,
      197,  197,  197, 1240,  850,  197, 1244, 1251, 1251, 1216,
      197,  851, 1251, 1242, 1251, 1251,  197,  197,  197,  197,
      197, 1251,  197,  849,  197,  197,  197,  197,  197,  197,
      855,  850,  197, 1244,  197,  197,  852,  197,  851,  197,
      197, 1251,  197,  197,  854,  197, 1251,  197,  853,  197,
      197, 1211, 1206,  197,  197,  197, 1251,  855,  197, 1251,
      856,  197,  197,  852,  857,  197,  197,  197,  197,  197,
      197,  854,  197, 1251,  197,  853,  197,  197, 1251,  197,

     1251,  197,  197,  197,  197,  197, 1251,  856, 1251,  197,
      858,  857,  197, 1219,  197,  197, 1251,  197,  197,  197,
     1251,  197, 1251,  197,  197, 1251,  197,  197,  197, 1251,
      197,  197,  197,  197,  197, 1251,  197,  858,  197, 1251,
     1219,  197, 1251,  197, 1251,  197,  197, 1251,  197,  859,
      197,  197, 1251,  197,  197,  197, 1251,  197,  197,  197,
      197,  197,  197,  197, 1251,  197,  860,  197,  197, 1251,
      197,  861, 1251,  197, 1251,  197,  859,  197,  197, 1251,
      197, 1251,  197, 1251,  197,  197,  197,  197, 1251,  197,
      197, 1251,  197,  860,  197,  197, 1251,  197,  861, 1251,

      197,  197,  197, 1251,  197,  197, 1251,  197, 1251,  197,
      862,  197, 1251,  197,  197,  197, 1251,  197,  197,  197,
      197,  197, 1251, 1251,  197,  864,  863, 1251,  197,  197,
      197,  197, 1251, 1251,  197, 1251, 1251,  862,  197,  865,
     1251, 1251,  197, 1251,  197,  197, 1251,  197,  197,  197,
     1251,  197,  864,  863, 1251, 1251,  197,  197,  197, 1251,
      197,  197,  197,  197, 1251,  197,  865,  197,  866, 1251,
      197, 1251,  197, 1251, 1251,  197,  197, 1251,  197,  867,
     1251,  197, 1251,  197, 1251, 1251,  197,  197,  197,  197,
      197,  197,  197, 1251,  197,  866, 1251,  197, 1251,  197,

     1251, 1251,  197,  197,  868,  197,  867,  197,  197,  197,
      197, 1251, 1251,  197,  197,  197,  869, 1251,  197,  197,
     1251,  197, 1251,  197, 1251, 1251, 1251, 1251,  197,  870,
      197,  868,  197,  197,  197, 1251,  197,  197, 1251, 1251,
      871,  197,  197,  869, 1251, 1251,  197, 1251,  197, 1251,
      197,  197, 1251,  197, 1251,  197,  870, 1251,  197,  197,
      197,  197, 1251,  197, 1251,  872,  197,  871,  873, 1251,
     1251,  197, 1251, 1251, 1251, 1251, 1251,  197,  197,  197,
      197, 1251, 1251, 1251,  197,  197,  197,  197,  197,  197,
      197,  874,  872,  197, 1251,  873, 1251,  197,  197, 1251,

     1251,  875, 1251,  197,  197, 1251,  197,  197,  197, 1251,
      197,  197,  197,  197,  197, 1251,  197,  197,  874,  197,
     1251,  197,  197, 1251,  197, 1251,  197, 1251,  875, 1251,
      197,  197, 1251, 1251,  197,  197, 1251,  197, 1251,  197,
      197, 1251, 1251,  197,  197,  197,  197,  876,  197,  197,
      197, 1251,  197,  197,  197,  197,  877, 1251,  197,  197,
     1251, 1251, 1251, 1251,  197, 1251,  197, 1251,  197, 1251,
      197, 1251,  197,  197,  876,  878, 1251,  197,  197,  197,
     1251,  197,  197,  877, 1251, 1251,  197, 1251,  880, 1251,
     1251,  197, 1251,  197, 1251,  197,  197, 1251,  197,  197,

      197,  197,  878,  197,  879,  197,  197, 1251,  197,  881,
     1251,  197, 1251, 1251,  882,  880, 1251, 1251,  197, 1251,
      197, 1251,  197,  197,  197,  197,  197,  197,  197, 1251,
      197,  879,  197,  197,  197,  197,  881, 1251,  197, 1251,
      197,  882,  197, 1251,  197,  197,  197,  197, 1251,  197,
      197,  197,  197, 1251,  197, 1251, 1251,  883, 1251,  197,
      197,  197,  197, 1251,  884, 1251,  197,  197,  197,  197,
      197,  197,  197,  197, 1251, 1251,  197,  197,  197,  197,
     1251, 1251, 1251, 1251,  883, 1251,  197,  197,  197,  197,
      197,  884, 1251,  197,  197,  197, 1251,  197,  885,  197,

      197, 1251,  197,  197, 1251,  197,  197,  197, 1251,  887,
      197, 1251,  197,  197,  197,  197, 1251,  197, 1251,  197,
      197,  197,  197, 1251,  197,  885, 1251,  197,  197,  197,
      197,  886,  197,  197,  197, 1251,  887,  197,  197,  197,
      197,  197, 1251, 1251, 1251, 1251,  197,  197,  197,  197,
     1251,  197, 1251, 1251,  197,  197,  197,  197,  886,  197,
     1251,  197,  197, 1251,  197,  197,  197,  197, 1251,  888,
     1251, 1251,  889, 1251,  197,  197,  197, 1251, 1251, 1251,
     1251,  197,  197,  197, 1251, 1251, 1251, 1251,  197,  197,
     1251,  197,  197,  197,  197, 1251,  888, 1251,  197,  889,

     1251,  197, 1251,  197,  197, 1251,  197,  890,  197,  197,
      197, 1251,  197,  197,  197, 1251,  892,  197,  891,  197,
     1251,  197,  197, 1251, 1251,  197, 1251, 1251, 1251, 1251,
     1251,  197, 1251,  197,  890,  197, 1251,  197, 1251,  197,
      197,  197, 1251,  892,  197,  891,  197, 1251,  197,  197,
     1251, 1251,  893,  197, 1251,  197, 1251,  197,  197, 1251,
     1251, 1251,  197, 1251, 1251, 1251, 1251,  197, 1251, 1251,
     1251, 1251, 1251,  197, 1251,  197, 1251, 1251, 1251,  893,
      197, 1251,  197, 1251,  197,  197,  894, 1251,  896,  197,
      197,  197, 1251,  197,  197,  197, 1251,  895,  197,  197,

      197,  197,  197,  197,  197, 1251,  197, 1251, 1251,  197,
     1251,  197, 1251,  894,  197,  896, 1251,  197,  197, 1251,
      197, 1251,  197, 1251,  895,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
     1251,  197,  197,  897,  197, 1251,  197,  197,  197, 1251,
     1251, 1251, 1251,  197, 1251, 1251, 1251, 1251,  197,  197,
     1251,  197,  197, 1251,  197,  898,  197,  197, 1251,  197,
      897,  197,  197,  197,  197,  197, 1251,  197,  899, 1251,
      197, 1251,  197,  197, 1251,  197,  900,  197,  197, 1251,
      197, 1251,  898,  197,  197, 1251,  197, 1251,  197,  197,

      197, 1251,  197,  197,  197,  899,  197,  901,  902,  197,
      197, 1251,  197,  900,  197,  197, 1251,  197, 1251, 1251,
      197, 1251, 1251,  197, 1251,  197, 1251,  197, 1251,  197,
      197, 1251,  903,  197,  901,  902,  197, 1251,  197,  197,
      197,  197,  197,  197, 1251,  905,  904,  197,  197, 1251,
     1251,  197,  197, 1251, 1251, 1251,  197, 1251, 1251,  903,
      197,  197, 1251,  197, 1251,  197,  197,  197,  197,  197,
      197, 1251,  905,  904,  197,  197,  197, 1251,  197,  197,
      906,  907,  197,  197, 1251,  197,  197,  197,  197, 1251,
     1251,  197,  197,  197, 1251, 1251, 1251, 1251, 1251, 1251,

     1251,  197,  197,  197, 1251, 1251, 1251,  906,  907,  197,
      197,  197,  197,  197,  197,  197, 1251, 1251,  197,  197,
      197,  197, 1251,  908,  909, 1251, 1251, 1251,  197,  197,
      197,  197, 1251, 1251, 1251,  197,  197,  197,  197,  197,
      197,  197,  197,  910, 1251,  197,  197,  197,  197, 1251,
      908,  909, 1251, 1251, 1251,  197,  197,  197,  197, 1251,
      911,  912,  197,  197,  197,  197,  197,  197,  197,  197,
      910, 1251,  197,  197,  197,  197, 1251, 1251, 1251, 1251,
     1251, 1251,  197,  197,  197,  197, 1251,  911,  912,  197,
      197,  197,  197,  197,  197,  197,  197, 1251,  913,  197,

      197,  197,  197, 1251, 1251, 1251, 1251, 1251, 1251,  197,
      197,  197,  197, 1251, 1251, 1251,  197,  197,  197,  197,
      197,  197,  197,  197, 1251,  913,  197,  197,  197,  197,
     1251,  914, 1251, 1251,  915, 1251,  197,  197,  197,  197,
      916, 1251, 1251,  197,  197,  197,  197,  197,  197,  197,
      197, 1251,  917,  197,  197,  197,  197, 1251,  914, 1251,
     1251,  915, 1251,  197,  197,  197,  197,  916, 1251, 1251,
      197,  197, 1251,  919,  197,  197,  197, 1251,  918,  917,
      197,  197,  197,  197,  197, 1251, 1251, 1251,  197,  197,
      197,  197,  920, 1251,  197, 1251,  197,  197, 1251, 1251,

      919,  197,  197,  197, 1251,  918,  921,  197,  197,  197,
      197,  197,  197,  197, 1251,  197,  197,  197,  197,  920,
     1251,  197,  197,  197,  197, 1251,  197,  922,  197,  197,
     1251,  197,  197,  921,  197,  197, 1251,  197, 1251,  197,
      197, 1251,  197, 1251,  197,  197,  197,  197, 1251,  197,
      923,  924, 1251,  197,  922,  197,  197, 1251,  197,  197,
     1251,  197, 1251, 1251,  197, 1251,  197, 1251, 1251,  197,
     1251,  197, 1251,  197,  197,  197,  197,  923,  924,  197,
      197, 1251,  197,  197, 1251,  925,  197, 1251,  197, 1251,
      197, 1251, 1251,  197,  197,  197,  197,  197,  197,  197,

      197, 1251,  197,  197,  926, 1251,  197,  197, 1251,  197,
      197, 1251,  925,  197, 1251, 1251, 1251,  197,  197, 1251,
      197,  197,  197,  197,  197,  927,  197,  197, 1251, 1251,
      197,  926,  197, 1251,  197, 1251,  197,  197, 1251,  197,
     1251, 1251,  928, 1251,  197,  197, 1251,  197,  197, 1251,
      929,  197,  927,  197, 1251,  197, 1251,  197,  197,  197,
      197,  197, 1251,  197, 1251, 1251,  197, 1251, 1251,  928,
     1251,  197,  197, 1251,  197,  197, 1251,  929,  197,  197,
      197,  930,  197, 1251,  197,  197,  197,  197,  197,  931,
      197, 1251, 1251,  197,  932, 1251, 1251, 1251,  197,  197,

      197,  197,  197, 1251, 1251, 1251,  197,  197,  930, 1251,
     1251,  197,  197,  197, 1251,  197,  931, 1251,  934,  933,
      197,  932,  197, 1251,  197,  197,  197,  197,  197,  197,
     1251,  197, 1251, 1251,  197, 1251,  197,  197,  197,  197,
      935,  197, 1251, 1251, 1251,  934,  933,  197, 1251,  197,
      197,  197, 1251,  197,  197,  197, 1251,  197,  197, 1251,
      197, 1251,  197,  197,  197,  197,  197,  935,  197, 1251,
      197, 1251,  197, 1251,  197,  197,  937,  197,  936,  197,
      197,  197,  197, 1251,  197,  197,  197,  197,  197,  197,
     1251, 1251,  197,  197, 1251,  197,  197,  197,  197,  197,

     1251, 1251,  197,  937, 1251,  936,  197,  197,  197,  197,
     1251, 1251,  197,  197,  197,  197,  197, 1251, 1251,  197,
     1251,  938,  197,  197, 1251,  197,  197,  197, 1251,  197,
      197, 1251,  197, 1251,  197,  197, 1251,  197,  197,  197,
      197,  197,  197,  197, 1251,  197, 1251, 1251,  938, 1251,
      197, 1251, 1007,  197,  197, 1251,  197,  197, 1251,  197,
     1251,  197, 1251, 1251,  197,  197,  197,  197,  197,  197,
      197, 1251,  197, 1251, 1008,  197, 1251,  197,  197, 1007,
      197, 1251, 1251,  197,  197, 1251, 1009,  197, 1251, 1251,
      197, 1251, 1251,  197,  197,  197,  197,  197, 1251, 1251,

     1251, 1008,  197,  197, 1251,  197,  197,  197, 1251, 1251,
      197,  197,  197, 1009,  197, 1251,  197,  197, 1251, 1251,
      197,  197,  197,  197, 1012,  197, 1251, 1010, 1251,  197,
      197, 1251,  197,  197, 1011,  197, 1251, 1251,  197,  197,
     1251, 1251,  197,  197, 1251,  197, 1251, 1251,  197,  197,
     1251, 1012,  197, 1251, 1010, 1251,  197, 1251,  197,  197,
     1251, 1011,  197, 1251, 1013,  197,  197, 1251, 1251,  197,
      197,  197,  197, 1014, 1251,  197,  197, 1251,  197, 1251,
      197, 1251,  197,  197, 1251,  197,  197,  197, 1015, 1251,
     1251, 1013,  197,  197, 1251, 1251, 1251,  197,  197, 1251,

     1014, 1251,  197,  197, 1251,  197,  197,  197, 1251,  197,
      197, 1251, 1016,  197,  197, 1015, 1017,  197, 1251,  197,
      197,  197,  197, 1251, 1251, 1251,  197,  197, 1251,  197,
      197, 1251, 1251,  197, 1019, 1251,  197,  197, 1018, 1016,
      197, 1251,  197, 1017,  197, 1251,  197,  197,  197,  197,
      197, 1251,  197,  197,  197, 1251,  197,  197, 1251, 1251,
      197, 1019,  197,  197,  197, 1018, 1020,  197, 1251,  197,
     1021, 1023, 1251,  197,  197,  197,  197,  197,  197,  197,
     1251,  197, 1251,  197,  197, 1251, 1251,  197, 1022,  197,
      197,  197, 1251, 1020,  197,  197, 1251, 1021, 1023, 1251,

      197,  197,  197,  197, 1251,  197,  197, 1251,  197,  197,
      197,  197, 1251, 1024, 1251, 1022,  197,  197,  197,  197,
     1251,  197,  197,  197,  197, 1026,  197,  197,  197,  197,
      197, 1251, 1251,  197,  197,  197,  197,  197, 1027, 1025,
     1024, 1251,  197,  197,  197, 1251,  197,  197,  197,  197,
      197,  197, 1026,  197, 1031,  197,  197,  197,  197,  197,
     1028,  197,  197,  197,  197, 1027, 1025,  197, 1251,  197,
      197,  197, 1251,  197,  197,  197,  197, 1251, 1029, 1251,
      197, 1031, 1251,  197, 1251,  197,  197, 1028,  197,  197,
      197,  197,  197, 1032,  197, 1251, 1251,  197,  197,  197,

      197, 1251, 1251, 1030, 1251, 1029, 1251,  197,  197,  197,
      197, 1033, 1251,  197,  197,  197,  197,  197,  197,  197,
     1032, 1251, 1251,  197,  197,  197,  197,  197, 1251, 1251,
     1030,  197, 1251,  197,  197,  197,  197,  197, 1033, 1251,
      197,  197,  197, 1251,  197,  197,  197,  197, 1251, 1251,
      197,  197,  197, 1251,  197, 1251, 1251, 1034,  197, 1251,
      197,  197,  197, 1035,  197,  197, 1251, 1251, 1251,  197,
      197, 1251, 1251,  197,  197,  197,  197, 1251,  197,  197,
     1251, 1251, 1251,  197, 1034, 1251, 1251, 1251,  197,  197,
     1035, 1251,  197, 1251, 1036, 1251, 1251,  197, 1251,  197,

     1251,  197,  197,  197, 1251,  197,  197,  197, 1251,  197,
      197,  197, 1251, 1251,  197,  197, 1251, 1251,  197,  197,
      197, 1036, 1251, 1251, 1251,  197,  197, 1251,  197, 1251,
      197, 1251, 1251,  197,  197, 1251,  197, 1251,  197, 1251,
     1251,  197,  197, 1251,  197,  197,  197,  197, 1251,  197,
     1037,  197,  197,  197,  197, 1251, 1251,  197,  197, 1251,
      197, 1251,  197,  197, 1251, 1251, 1251,  197, 1251,  197,
     1251,  197,  197, 1251, 1251, 1251,  197, 1037,  197, 1251,
      197,  197, 1251, 1251,  197,  197,  197,  197, 1251,  197,
      197,  197, 1038,  197,  197,  197,  197, 1039, 1251,  197,

     1040,  197, 1042, 1041,  197,  197, 1251,  197, 1251,  197,
     1251,  197, 1251,  197,  197, 1251, 1251,  197,  197, 1038,
      197, 1251,  197,  197, 1039, 1251, 1251, 1040,  197, 1042,
     1041,  197,  197,  197,  197,  197,  197, 1251, 1251, 1043,
      197,  197, 1251, 1251,  197,  197,  197,  197,  197,  197,
     1251, 1251, 1251,  197,  197, 1251, 1251, 1251,  197,  197,
      197, 1251,  197, 1251, 1251, 1251, 1043,  197, 1251, 1251,
     1251, 1251,  197,  197,  197,  197,  197,  197, 1251,  197,
      197,  197, 1251, 1044,  197,  197,  197,  197,  197,  197,
      197, 1251, 1251,  197, 1251,  197, 1251, 1251, 1251, 1251,

      197, 1251, 1251,  197,  197, 1251,  197, 1251, 1251, 1251,
     1044,  197, 1251, 1251,  197,  197,  197,  197, 1251,  197,
      197,  197,  197, 1251, 1046, 1251, 1045,  197, 1251, 1251,
      197,  197,  197, 1251,  197,  197, 1251,  197, 1251,  197,
     1047, 1251,  197, 1251,  197, 1251,  197,  197,  197, 1251,
     1251, 1046, 1251, 1045, 1251, 1251, 1251, 1251,  197,  197,
     1251,  197,  197, 1251,  197, 1251,  197, 1047, 1251,  197,
     1251,  197, 1048,  197,  197,  197,  197,  197,  197,  197,
      197, 1049, 1251,  197,  197,  197, 1251, 1251,  197,  197,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1048,

      197, 1251,  197,  197,  197,  197,  197,  197, 1049, 1251,
      197,  197,  197, 1251, 1251,  197,  197,  197, 1050,  197,
     1251,  197,  197,  197,  197,  197, 1251,  197,  197,  197,
      197,  197,  197,  197, 1051, 1251, 1052, 1062,  197, 1251,
     1251,  197,  197,  197,  197, 1050,  197, 1251,  197,  197,
      197,  197,  197, 1251,  197,  197,  197,  197,  197,  197,
      197, 1051, 1053, 1052, 1062,  197,  197,  197,  197,  197,
      197, 1054,  197, 1251, 1251,  197, 1055,  197, 1251,  197,
      197, 1251,  197, 1251,  197,  197, 1251,  197, 1251, 1053,
      197, 1251, 1251,  197,  197,  197, 1251, 1251, 1054,  197,

      197, 1251,  197, 1055,  197, 1251,  197,  197, 1251,  197,
     1251,  197,  197, 1251,  197, 1056, 1251,  197, 1251,  197,
     1057,  197,  197,  197, 1251,  197, 1251,  197,  197,  197,
      197,  197, 1251,  197,  197,  197, 1251,  197,  197,  197,
      197,  197, 1056,  197,  197, 1251,  197, 1057,  197, 1058,
      197, 1251,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197, 1059,  197,  197,  197,  197,  197,  197,
      197,  197, 1060,  197, 1061, 1251, 1058,  197,  197,  197,
      197,  197,  197,  197, 1251,  197,  197,  197,  197, 1251,
     1059, 1063,  197,  197, 1251, 1251,  197,  197,  197, 1060,

      197, 1061, 1251, 1251,  197,  197,  197, 1251, 1251,  197,
      197, 1251,  197, 1251,  197,  197, 1251, 1251, 1063,  197,
      197,  197, 1251,  197,  197,  197, 1065, 1251,  197, 1064,
     1251, 1067, 1251,  197, 1066,  197, 1251,  197, 1251,  197,
     1251,  197, 1251, 1251,  197,  197, 1251,  197,  197,  197,
      197,  197,  197, 1065, 1251,  197, 1064,  197, 1067, 1251,
      197, 1066,  197, 1069,  197, 1251,  197,  197,  197, 1251,
     1251,  197,  197,  197,  197, 1251,  197, 1251,  197,  197,
     1068,  197,  197,  197,  197,  197,  197, 1251, 1251, 1251,
     1069,  197,  197, 1251,  197, 1251, 1251, 1251, 1251, 1251,

      197,  197,  197, 1251,  197, 1251,  197, 1068,  197,  197,
      197, 1070,  197,  197, 1071, 1251,  197, 1251,  197,  197,
     1251, 1251, 1251, 1251, 1251,  197, 1251,  197,  197,  197,
     1251,  197,  197,  197, 1251, 1072, 1251,  197, 1070, 1251,
     1251, 1071, 1251,  197, 1251, 1251,  197, 1251,  197,  197,
     1251,  197,  197,  197,  197, 1251,  197, 1251,  197,  197,
     1251,  197, 1072, 1251,  197,  197, 1251,  197, 1251, 1251,
     1251, 1251,  197,  197, 1251,  197,  197,  197,  197, 1251,
      197, 1251, 1251,  197, 1251,  197, 1113,  197,  197, 1251,
      197,  197,  197,  197,  197, 1114,  197,  197, 1251,  197,

      197, 1251, 1251, 1251,  197,  197,  197,  197, 1251,  197,
     1251,  197, 1251, 1113,  197, 1251,  197,  197,  197, 1251,
      197,  197, 1114,  197,  197, 1251, 1251,  197,  197, 1251,
     1115, 1251,  197,  197,  197,  197,  197, 1251,  197, 1251,
      197, 1116, 1251,  197, 1251,  197, 1251, 1251,  197,  197,
     1251,  197, 1251,  197, 1251,  197, 1251, 1115,  197,  197,
      197,  197,  197, 1251, 1117, 1118, 1251,  197, 1116,  197,
      197, 1251,  197, 1251, 1251, 1251,  197,  197,  197,  197,
      197, 1251, 1251, 1251,  197,  197,  197,  197,  197,  197,
     1251, 1117, 1118, 1119, 1251,  197,  197,  197, 1251, 1251,

      197,  197, 1251,  197,  197,  197,  197,  197,  197,  197,
     1251,  197, 1251,  197, 1120, 1251,  197, 1251, 1251,  197,
     1119, 1251,  197, 1251, 1251, 1251, 1251,  197,  197, 1251,
      197, 1251,  197, 1251,  197,  197,  197,  197, 1121,  197,
      197, 1120, 1122, 1123,  197,  197,  197, 1251, 1251,  197,
      197,  197, 1251,  197, 1251,  197, 1251, 1251,  197, 1251,
     1251, 1251, 1251,  197,  197, 1121,  197, 1251, 1251, 1122,
     1123,  197,  197, 1251, 1251, 1251,  197,  197,  197,  197,
      197,  197,  197, 1125, 1251,  197,  197, 1124, 1251, 1251,
      197,  197,  197,  197,  197,  197, 1251, 1251, 1251,  197,

      197, 1251, 1251, 1251,  197,  197,  197, 1251,  197, 1251,
     1125, 1251, 1251,  197, 1124, 1251, 1251, 1251,  197,  197,
      197,  197,  197,  197, 1251,  197,  197,  197, 1126, 1251,
      197,  197,  197, 1251,  197,  197,  197,  197, 1251,  197,
     1251,  197, 1251, 1251,  197, 1251,  197, 1251, 1251,  197,
      197, 1251,  197, 1251, 1251, 1126, 1251,  197,  197, 1251,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197, 1251,  197,  197, 1251,  197, 1251, 1127,  197,
      197, 1251,  197, 1251,  197,  197, 1251,  197,  197, 1251,
      197, 1251,  197, 1251,  197, 1251,  197,  197,  197, 1251,

      197,  197, 1251, 1251, 1251, 1127,  197,  197, 1251,  197,
     1251,  197,  197, 1251, 1128,  197, 1251,  197, 1251,  197,
     1251,  197, 1251,  197,  197,  197, 1251,  197,  197, 1129,
      197, 1251,  197,  197, 1251, 1251, 1251,  197, 1251,  197,
     1251, 1128,  197, 1251, 1251, 1251,  197, 1251,  197, 1251,
      197,  197, 1251, 1251, 1251,  197, 1129,  197, 1251,  197,
      197,  197, 1251,  197,  197,  197, 1251,  197,  197,  197,
     1251, 1251,  197,  197,  197, 1251,  197,  197, 1251, 1251,
     1251,  197, 1251, 1251, 1251, 1251,  197, 1251,  197, 1251,
      197, 1251,  197, 1251,  197,  197, 1251, 1251, 1251,  197,

      197,  197, 1251,  197,  197,  197, 1251,  197,  197,  197,
     1131,  197,  197,  197,  197, 1130,  197,  197, 1251, 1251,
      197,  197, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
      197, 1251,  197, 1251,  197, 1251,  197, 1131,  197,  197,
     1251,  197, 1130,  197,  197, 1132,  197,  197,  197,  197,
      197,  197, 1251,  197, 1251,  197,  197,  197,  197,  197,
      197,  197, 1251, 1251, 1251, 1133,  197, 1251, 1251,  197,
      197,  197, 1132,  197, 1251, 1251,  197,  197,  197, 1251,
      197, 1251,  197,  197, 1251,  197,  197,  197,  197, 1251,
     1251, 1251, 1133,  197, 1251, 1251,  197,  197,  197,  197,

     1134,  197,  197,  197, 1251,  197,  197,  197, 1251, 1251,
      197,  197,  197, 1251, 1251,  197, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251,  197, 1134,  197,  197,
      197, 1251,  197,  197,  197, 1135, 1251,  197,  197,  197,
     1251, 1251,  197,  197, 1251,  197,  197, 1251,  197,  197,
      197,  197, 1251,  197, 1251,  197,  197, 1136,  197, 1137,
     1251,  197, 1135,  197, 1251, 1251, 1251, 1251, 1251,  197,
      197, 1251,  197,  197, 1251,  197,  197,  197,  197,  197,
      197, 1251,  197,  197, 1136,  197, 1137,  197,  197,  197,
      197,  197, 1251,  197, 1251, 1251,  197,  197, 1251,  197,

     1251, 1251, 1251,  197, 1251,  197,  197, 1138, 1251,  197,
     1141, 1139, 1251,  197,  197,  197,  197,  197,  197, 1140,
      197,  197, 1251,  197,  197,  197,  197, 1251, 1251, 1251,
      197,  197,  197,  197, 1138, 1251,  197, 1141, 1139, 1251,
      197,  197,  197, 1251,  197, 1251, 1140,  197,  197,  197,
      197, 1251,  197, 1251, 1142,  197, 1251,  197,  197,  197,
      197, 1251,  197,  197, 1251, 1143, 1251,  197,  197, 1251,
      197,  197, 1251,  197,  197,  197,  197, 1251,  197, 1251,
     1251, 1142,  197,  197,  197, 1251,  197, 1251, 1251,  197,
      197, 1251, 1143, 1251,  197, 1251, 1251,  197,  197, 1144,

      197,  197,  197, 1251, 1145,  197,  197,  197, 1251,  197,
      197,  197, 1146, 1251,  197,  197, 1251,  197, 1251,  197,
     1251, 1251,  197,  197, 1251,  197, 1144,  197,  197, 1251,
      197, 1145, 1251,  197,  197,  197,  197, 1251,  197, 1146,
     1251,  197,  197, 1251,  197, 1251,  197, 1147, 1251,  197,
      197, 1251,  197,  197,  197,  197,  197,  197,  197, 1251,
      197, 1148,  197,  197,  197,  197,  197, 1251,  197, 1251,
     1251,  197, 1251, 1251, 1147, 1251,  197,  197, 1251,  197,
      197, 1251,  197,  197,  197,  197, 1251,  197, 1148,  197,
      197,  197,  197,  197, 1251,  197, 1251, 1251,  197, 1251,

      197, 1251,  197,  197,  197, 1251,  197,  197,  197, 1251,
      197,  197,  197, 1251, 1251,  197,  197, 1251, 1251,  197,
      197,  197, 1251, 1251, 1251, 1149,  197,  197, 1251,  197,
     1251,  197, 1251, 1251,  197,  197, 1251,  197, 1150,  197,
      197, 1251,  197, 1251, 1251,  197,  197,  197,  197,  197,
      197,  197, 1149,  197, 1251, 1251,  197,  197,  197,  197,
     1251,  197, 1251, 1251,  197, 1150, 1251,  197,  197,  197,
      197, 1251,  197, 1251, 1251,  197,  197,  197,  197, 1251,
      197, 1251, 1251,  197,  197, 1251,  197,  197,  197,  197,
     1251,  197, 1251, 1251,  197,  197,  197,  197, 1251,  197,

     1170, 1251,  197, 1251,  197,  197, 1251,  197,  197,  197,
      197, 1251,  197, 1171,  197,  197,  197,  197,  197, 1251,
      197,  197, 1251,  197, 1251,  197,  197, 1170,  197, 1251,
     1251,  197,  197,  197, 1251,  197,  197,  197, 1251,  197,
     1171, 1251,  197, 1251,  197,  197, 1251,  197, 1251, 1172,
      197, 1251,  197,  197, 1173,  197, 1251,  197,  197,  197,
      197,  197,  197, 1251, 1251, 1251, 1251,  197,  197,  197,
     1251, 1251, 1251, 1251, 1251, 1251, 1172,  197,  197, 1251,
      197, 1173, 1251,  197,  197,  197,  197,  197,  197,  197,
     1251, 1251, 1251,  197,  197,  197,  197, 1174,  197, 1251,

     1251,  197,  197,  197,  197,  197, 1251,  197,  197, 1251,
      197,  197,  197, 1175,  197,  197,  197,  197,  197, 1251,
      197,  197,  197, 1251, 1174,  197, 1251, 1251,  197,  197,
      197,  197,  197, 1251,  197,  197, 1251,  197,  197,  197,
     1175,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197, 1251, 1251, 1251, 1251, 1251,  197,  197,  197,  197,
     1177, 1251,  197, 1176,  197,  197,  197,  197,  197,  197,
     1251, 1251,  197,  197,  197,  197, 1251,  197, 1251,  197,
     1251,  197, 1251,  197,  197,  197,  197, 1177, 1251,  197,
     1176,  197,  197,  197,  197, 1251,  197, 1179,  197,  197,

      197,  197,  197, 1251, 1251,  197,  197,  197,  197,  197,
      197,  197,  197,  197, 1251, 1178,  197,  197,  197,  197,
     1251,  197, 1251,  197, 1179,  197, 1251,  197,  197,  197,
     1251,  197,  197, 1251,  197,  197,  197,  197,  197,  197,
     1251,  197, 1178,  197,  197,  197,  197, 1251,  197,  197,
      197,  197, 1251,  197, 1251,  197,  197,  197,  197, 1181,
     1180, 1251,  197,  197, 1251,  197,  197, 1251,  197, 1251,
     1251,  197,  197,  197, 1251,  197,  197, 1251,  197,  197,
      197,  197,  197,  197,  197, 1251, 1181, 1180, 1251,  197,
      197,  197,  197, 1251, 1251, 1251, 1251,  197,  197,  197,

      197,  197,  197, 1251, 1251,  197,  197,  197,  197,  197,
      197, 1251, 1182, 1251, 1251,  197,  197,  197,  197, 1251,
     1251, 1251, 1251, 1251,  197,  197,  197,  197,  197, 1251,
     1251,  197,  197, 1251,  197, 1251,  197,  197, 1251, 1182,
     1183,  197,  197, 1251,  197,  197, 1186,  197, 1251, 1184,
      197,  197,  197, 1251,  197,  197,  197, 1251,  197,  197,
     1251,  197, 1251, 1251,  197,  197,  197, 1183,  197, 1251,
     1185, 1251,  197, 1186,  197,  197, 1184,  197,  197, 1251,
      197,  197,  197,  197,  197,  197,  197, 1251,  197, 1251,
      197,  197,  197,  197, 1251, 1251, 1251, 1185, 1251, 1251,

      197,  197,  197, 1251, 1251, 1251,  197,  197,  197, 1251,
      197,  197,  197,  197, 1251,  197,  197,  197,  197, 1197,
     1198, 1251,  197, 1251,  197,  197,  197,  197,  197,  197,
     1251, 1251, 1251,  197,  197, 1251, 1251,  197, 1251, 1251,
      197, 1251,  197,  197, 1251, 1251, 1197, 1198, 1251,  197,
     1251,  197,  197,  197, 1251,  197,  197,  197,  197, 1251,
      197,  197,  197, 1199,  197,  197,  197,  197, 1251, 1251,
      197,  197, 1251, 1251, 1251, 1251,  197, 1251, 1251, 1251,
     1251, 1251,  197, 1251,  197,  197, 1251,  197, 1251,  197,
     1199,  197,  197,  197,  197, 1251, 1251,  197,  197,  197,

     1251,  197,  197,  197,  197, 1251,  197, 1200,  197,  197,
      197,  197, 1251, 1251,  197,  197, 1251, 1251, 1251, 1251,
      197, 1251, 1251, 1251, 1251, 1251,  197, 1251,  197,  197,
     1251,  197, 1251,  197, 1200,  197,  197,  197,  197, 1251,
     1251,  197,  197,  197,  197,  197,  197,  197, 1251, 1201,
      197,  197,  197, 1251,  197,  197,  197, 1251, 1251,  197,
     1251, 1251, 1251, 1251,  197, 1251, 1251, 1251, 1251, 1251,
      197,  197,  197,  197, 1251, 1251, 1201,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197, 1251, 1251,
      197,  197,  197, 1251, 1251,  197, 1251,  197,  197,  197,

     1202, 1251, 1204, 1251, 1251,  197, 1203,  197,  197, 1251,
     1251,  197,  197, 1251,  197,  197, 1251,  197,  197,  197,
     1251, 1251,  197, 1251,  197,  197,  197, 1202, 1251, 1204,
      197, 1251,  197, 1203,  197,  197, 1251, 1211, 1206, 1251,
      197, 1251,  197,  197, 1212,  197, 1251,  197,  197, 1251,
      197, 1251, 1251,  197,  197, 1251, 1251,  197, 1251, 1251,
     1251,  197,  197,  197,  197, 1251,  197,  197, 1251, 1251,
      197, 1212,  197, 1251,  197,  197, 1251,  197, 1251, 1251,
      197,  197,  197, 1251,  197,  197, 1251,  197,  197,  197,
      197,  197, 1213,  197,  197, 1251,  197,  197,  197,  197,

     1251, 1251, 1251,  197,  197, 1251,  197, 1251,  197,  197,
      197,  197,  197, 1251,  197,  197, 1214, 1251, 1251, 1213,
      197,  197,  197,  197,  197,  197,  197,  197, 1251, 1251,
      197,  197,  197,  197, 1251,  197,  197,  197,  197, 1251,
      197, 1251,  197, 1214, 1251, 1251,  197,  197,  197,  197,
      197, 1251, 1220,  197,  197, 1251,  197,  197,  197,  197,
     1251, 1251,  197,  197,  197,  197,  197,  197, 1251,  197,
     1251,  197, 1251,  197, 1251,  197,  197,  197, 1251, 1220,
     1251, 1251, 1251,  197,  197,  197, 1251, 1251, 1251,  197,
     1251,  197, 1251,  197, 1251, 1251, 1251, 1251,  197, 1251,

     1251, 1251, 1251,  197,   46,   46,   46,   46,   46,   88,
     1251, 1251,   88,   88,  182,  182,  182, 1251,  182,  184,
     1251,  184,  184,  184,  187, 1251,  187,  187,  187,  197,
     1251,  197,  197,  197,    7, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,

     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251
    } ;

static yyconst flex_int16_t yy_chk[8412] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   21,   22,   21,   49,   49,   22,   23,   30,   21,
     1254,   21,   22, 1248,   23,   21,   21,   31, 1247,   44,

     1246,   23,   22,   24,   23, 1245,   27,   24,   21,   22,
       21,   24,   27,   22,   23,   30,   21,   24,   21,   22,
       24,   23,   21,   21,   31,   25,   44,   25,   23,   22,
       24,   23,   25,   27,   24,   43,   43,   25,   24,   27,
     1243,   32,   28, 1241,   24,   32,   55,   24,   50,   50,
       28,   32,   25, 1239,   25, 1237,   28,   55, 1235,   25,
       58,   58,   43,   43,   25,   26,   86,   86,   32,   28,
       34,   33,   32,   26,   99,   33,   26,   28,   32,   26,
       29,   33,   26,   28,   34,   26,   29,   29,   29, 1233,
       34,   34,   26,   29, 1231,   38,  100,   34,   33,   38,

       26,   99,   33,   26, 1229,   38,   26,   29,   33,   26,
       36,   34,   26,   29,   29,   29,   35,   34,   34,  103,
       29,   36,   38,  100,   35,  104,   38,   36,   35,  106,
      107,   35,   38,   41, 1227,   41, 1225,   36,   41,   42,
     1223,  110, 1221,   35,  185,  185,  103,   42,   36, 1188,
     1188,   35,  104, 1218,   36,   35,  106,  107,   35,   39,
       41,   39,   41,  109,   39,   41,   42,   39,  110,   39,
      109,   39,   39, 1215,   42,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,  101,   39, 1210,   39,  102,
      109,   39,  102,  101,   39,  116,   39,  109,   39,   39,

       40,  112,  117,   67,   40,   67,  118,   40,   40,   67,
       67,  112,  101,  119,   40,   67,  102,   40, 1205,  102,
      101, 1196,  116, 1187, 1169, 1151, 1112,   40,  112,  117,
       67,   40,   67,  118,   40,   40,   67,   67,  112, 1073,
      119,   40,   67, 1006,   40,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   61,   61,  120,   61,
       61,   61,   61,   61,   61,  122,   68,  123,  939,  848,
       68,  757,  105,  105,   68,   61,   61,   61,   70,  113,
       68,   61,   70,   61,  113,  120,  105,  124,   70,   61,
       68,   61,  122,   68,  123,   61,   61,   68,   70,  105,

      105,   68,  115,  115,  639,   70,  113,   68,   61,   70,
       61,  113,  521,  105,  124,   70,   61,   68,   61,  402,
      125,  282,   61,   61,  189,   70,  187,   90,   88,  115,
      115,   61,   62,   62,   85,   62,   62,   62,   62,   62,
       62,   60,   59,  126,   71,   72,   73,  125,   71,   72,
       73,   62,   62,   62,   71,   72,   73,  127,   62,  111,
      111,  111,   62,  111,   71,   72,   73,   77,   62,   77,
      126,   71,   72,   73,   77,   71,   72,   73,   62,   77,
       52,   71,   72,   73,  127,   62,  111,  111,  111,   62,
      111,   71,   72,   73,   77,   62,   77,  128,   51,   78,

       84,   77,  129,   78,   84,   62,   77,   62,   63,   78,
       84,  130,   63,  131,  130,   63,   63,  132,  134,   78,
       84,  135,   63,  137,  128,   63,   78,   84,   47,  129,
       78,   84,   63,   45,  138,   63,   78,   84,  130,   63,
      131,  130,   63,   63,  132,  134,   78,   84,  135,   63,
      137,   81,   63,   81,  139,   81,  140,   20,   81,   63,
       64,  138,   82,   81,   64,  141,   82,  141,   64,  143,
       82,  144,  145,  146,   64,  148,   82,   64,   81,  149,
       81,  139,   81,  140,   64,   81,   82,   64,  150,   82,
       81,   64,  141,   82,  141,   64,  143,   82,  144,  145,

      146,   64,  148,   82,   64,   19,  149,   11,    7,    4,
      152,   64,   65,   82,   83,  150,   65,   83,   83,   65,
      136,   65,   65,  153,   83,  147,   65,  154,  147,  155,
      136,   65,   65,    3,   83,  136,  136,  152,    0,   65,
        0,   83,  158,   65,   83,   83,   65,  136,   65,   65,
      153,   83,  147,   65,  154,  147,  155,  136,   65,   65,
       66,   83,  136,  136,   66,  114,  159,  114,   66,  158,
      114,   66,  160,  121,   66,  121,  114,   66,  156,  121,
       66,    0,  156,  114,   66,    0,  121,   66,    0,    0,
      121,   66,  114,  159,  114,   66,  163,  114,   66,  160,

      121,   66,  121,  114,   66,  156,  121,   66,  157,  156,
      114,   66,   69,  121,  142,  161,  142,  121,   69,   69,
       69,  157,  162,  163,  161,   69,  157,  142,  164,  165,
       69,    0,  161,  166,  167,  157,  162,    0,  169,   69,
      170,  142,  161,  142,  171,   69,   69,   69,  157,  162,
      172,  161,   69,  157,  142,  164,  165,   69,   74,  161,
      166,  167,   74,  162,  168,  169,   74,  170,  174,  175,
      172,  171,   74,  173,  176,  168,  173,  172,   74,   74,
      176,  177,   74,    0,  178,   74,  179,  180,  285,   74,
      287,  168,  288,   74,  177,  174,  175,  172,    0,   74,

      173,  176,  168,  173,  290,   74,   74,  176,  177,   74,
       75,  178,  292,  179,  180,  285,   75,  287,   75,  288,
      293,  177,   75,   75,  294,   75,  295,  296,   75,    0,
        0,  290,    0,    0,    0,    0,    0,   75,    0,  292,
        0,  297,    0,   75,  299,   75,    0,  293,  300,   75,
       75,  294,   75,  295,  296,   75,   76,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   76,  297,   76,
      301,  299,  302,   76,   76,  300,  303,    0,  304,   76,
        0,    0,    0,   76,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   76,    0,   76,  301,  305,  302,

       76,   76,    0,  303,  197,  304,   76,   79,  197,   79,
      307,  308,   79,   79,  197,   79,    0,   79,  309,   79,
       79,    0,  198,  198,  197,  305,  310,  198,  306,   79,
        0,  197,  306,  198,   79,  197,   79,  307,  308,   79,
       79,  197,   79,  198,   79,  309,   79,   79,  199,  198,
      198,  197,  199,  310,  198,  306,   79,   80,  199,  306,
      198,   80,  311,  199,   80,   80,  312,  313,  199,  314,
      198,   80,  315,  316,   80,  199,  317,  311,  319,  199,
      320,   80,    0,    0,   80,  199,    0,    0,   80,  311,
      199,   80,   80,  312,  313,  199,  314,    0,   80,  315,

      316,   80,    0,  317,  311,  319,    0,  320,   80,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  200,  321,  200,  202,  322,  202,  323,  200,  200,
      202,  202,    0,  200,    0,  324,  202,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,    0,  200,  321,
      200,  202,  322,  202,  323,  200,  200,  202,  202,  203,
      200,  201,  324,  202,  201,  298,  205,  298,  203,  325,

      203,  205,  201,  205,  201,  203,  326,    0,  205,  201,
      203,    0,  298,  205,  201,    0,  203,    0,  201,  327,
        0,  201,  298,  205,  298,  203,  325,  203,  205,  201,
      205,  201,  203,  326,  206,  205,  201,  203,  206,  298,
      205,  201,  204,  204,  206,  328,  327,  207,  204,  329,
      204,  207,    0,  330,  206,  204,  204,  207,  331,    0,
      204,  206,  332,    0,    0,  206,    0,  207,    0,  204,
      204,  206,  328,  333,  207,  204,  329,  204,  207,  209,
      330,  206,  204,  204,  207,  331,  208,  204,  208,  332,
      209,  211,  209,  208,  207,  211,  334,  209,  208,  335,

      333,  211,  209,    0,    0,    0,  209,    0,    0,  336,
        0,  211,    0,  208,    0,  208,    0,  209,  211,  209,
      208,    0,  211,  334,  209,  208,  335,  337,  211,  209,
      210,  210,  210,  338,  210,  212,  336,  210,  211,  212,
      339,  214,  210,  214,  340,  212,  341,  214,  214,  343,
      212,  344,  346,  214,  337,  212,    0,  210,  210,  210,
      338,  210,  212,    0,  210,    0,  212,  339,  214,  210,
      214,  340,  212,  341,  214,  214,  343,  212,  344,  346,
      214,  347,  212,  213,  348,  213,  349,  351,  213,  352,
      215,  217,  215,  217,  213,  353,  213,  215,  217,  215,

        0,  213,  215,  217,    0,    0,  213,  354,  347,    0,
      213,  348,  213,  349,  351,  213,  352,  215,  217,  215,
      217,  213,  353,  213,  215,  217,  215,  216,  213,  215,
      217,  216,  223,  213,  354,  218,  223,  216,  342,  355,
      219,  357,  223,  218,  358,  218,  359,  216,  342,  219,
      218,  219,  223,    0,  216,  218,  219,  360,  216,  223,
        0,  219,  218,  223,  216,  342,  355,  219,  357,  223,
      218,  358,  218,  359,  216,  342,  219,  218,  219,  223,
      350,    0,  218,  219,  360,  221,    0,  221,  219,  220,
      350,  220,  221,    0,  361,  220,  222,  221,  222,  362,

      224,  220,  220,  222,  224,    0,  220,  350,  222,    0,
      224,  220,  221,  224,  221,    0,  220,  350,  220,  221,
      224,  361,  220,  222,  221,  222,  362,  224,  220,  220,
      222,  224,  225,  220,  363,  222,  225,  224,  220,  226,
      224,  226,  225,  364,  227,  228,  226,  224,  227,  228,
      365,  226,  225,  366,  227,  228,    0,  367,    0,  225,
        0,  363,    0,  225,  227,  228,  226,    0,  226,  225,
      364,  227,  228,  226,  368,  227,  228,  365,  226,  225,
      366,  227,  228,  229,  367,  229,  369,  230,  370,  230,
      229,  227,  228,  229,  230,  229,  231,  371,  231,  230,

        0,  368,    0,  231,  372,  231,    0,    0,  231,  373,
      229,    0,  229,  369,  230,  370,  230,  229,    0,  374,
      229,  230,  229,  231,  371,  231,  230,  232,  376,  232,
      231,  372,  231,  233,  232,  231,  373,  233,  234,  232,
      377,  378,  234,  233,  379,  236,  374,  236,  234,  234,
        0,    0,  236,  233,  232,  376,  232,  236,  234,    0,
      233,  232,  380,  381,  233,  234,  232,  377,  378,  234,
      233,  379,  236,  237,  236,  234,  234,  237,  238,  236,
      233,    0,  238,  237,  236,  234,  235,    0,  238,  380,
      381,    0,    0,  237,  235,  382,  235,    0,  238,  383,

      237,  235,  235,  384,  237,  238,  235,  239,  239,  238,
      237,  239,  242,  235,  242,  238,  385,  239,  242,  242,
      237,  235,  382,  235,  242,  238,  383,  239,  235,  235,
      384,  386,    0,  235,  239,  239,    0,    0,  239,  242,
      243,  242,  243,  385,  239,  242,  242,  243,    0,  388,
        0,  242,  243,    0,  239,  240,    0,  391,  386,  240,
      255,  240,  389,  240,  255,  240,    0,  243,  392,  243,
      255,  389,  393,  262,  243,  240,  388,  262,    0,  243,
      255,    0,  240,  262,  391,  394,  240,  255,  240,  389,
      240,  255,  240,  262,    0,  392,    0,  255,  389,  393,

      262,  395,  240,  241,  262,  241,  244,  255,  244,  390,
      262,  390,  394,  244,  241,  245,  241,  245,  244,  396,
      262,  241,  245,  245,  397,  398,  241,  245,  395,  398,
      241,    0,  241,  244,  399,  244,  390,  400,  390,    0,
      244,  241,  245,  241,  245,  244,  396,  522,  241,  245,
      245,  397,  398,  241,  245,  246,  398,  246,  247,    0,
      247,  399,  246,  246,  400,  247,  246,  246,  248,    0,
      247,  250,  523,  250,  522,    0,  524,    0,  250,  248,
        0,  248,  246,  250,  246,  247,  248,  247,    0,  246,
      246,  248,  247,  246,  246,  248,  249,  247,  250,  523,

      250,  525,  249,  524,  249,  250,  248,  251,  248,  249,
      250,    0,  526,  248,  249,  251,  527,  251,  248,    0,
      528,    0,  251,  249,    0,  529,    0,  251,  525,  249,
        0,  249,    0,  530,  251,  532,  249,  535,  252,  526,
      252,  249,  251,  527,  251,  252,  252,  528,  254,  251,
      252,  253,  529,  253,  251,  536,  537,  253,  253,  254,
      530,  254,  532,  253,  535,  252,  254,  252,    0,  538,
      540,  254,  252,  252,  541,  254,  256,  252,  253,    0,
      253,    0,  536,  537,  253,  253,  254,  256,  254,  256,
      253,    0,  542,  254,  256,  257,  538,  540,  254,  256,

      257,  541,  257,  256,  543,    0,  258,  257,  258,    0,
      545,    0,  257,  258,  256,    0,  256,  546,  258,  542,
        0,  256,  257,  547,    0,    0,  256,  257,    0,  257,
      548,  543,  259,  258,  257,  258,  259,  545,  259,  257,
      258,  549,  268,  259,  546,  258,  268,  261,  259,    0,
      547,  261,  268,  550,  551,  261,  552,  548,    0,  259,
        0,  261,  268,  259,    0,  259,    0,    0,  549,  268,
      259,  261,  553,  268,  261,  259,  260,    0,  261,  268,
      550,  551,  261,  552,    0,  260,  263,  260,  261,  268,
      263,  264,  260,  260,  263,  264,    0,  260,  261,  553,

      263,  264,    0,  260,  264,  556,    0,  557,  558,    0,
      263,  264,  260,  263,  260,  559,  560,  263,  264,  260,
      260,  263,  264,  266,  260,  265,  266,  263,  264,  265,
      266,  264,  556,  265,  557,  558,  266,  263,  264,  265,
        0,    0,  559,  560,    0,  561,  266,    0,  562,  265,
      266,  269,  265,  266,  564,  269,  265,  266,  565,  269,
      265,  269,  568,  266,    0,  569,  265,  267,  267,  267,
      571,  269,  561,  266,  267,  562,  265,    0,  269,  267,
      270,  564,  269,  573,  270,  565,  269,    0,  269,  568,
      270,  270,  569,  574,  267,  267,  267,  571,  269,    0,

      270,  267,    0,  273,  273,    0,  267,  270,  273,    0,
      573,  270,    0,  575,  273,    0,  576,  270,  270,  272,
      574,    0,  577,  272,  273,    0,  272,  270,  271,  272,
      273,  273,  271,  578,  274,  273,  271,  581,  274,  272,
      575,  273,  271,  576,  274,    0,  272,    0,  271,  577,
      272,  273,  271,  272,  274,  271,  272,    0,  585,  271,
      578,  274,  579,  271,  581,  274,  272,    0,  587,  271,
      275,  274,  275,  579,  276,  271,  275,  275,  276,  271,
      588,  274,  275,  590,  276,  585,  277,  276,  404,  579,
      277,  592,  404,    0,  276,  587,  277,  275,  404,  275,

      579,  276,    0,  275,  275,  276,  277,  588,  404,  275,
      590,  276,  278,  277,  276,  404,  278,  277,  592,  404,
      279,  276,  278,  277,  279,  404,  593,  278,  279,  408,
      594,  408,  278,  277,  279,  404,  408,  591,  591,  278,
      596,  408,  597,  278,  279,    0,    0,  279,    0,  278,
        0,  279,    0,  593,  278,  279,  408,  594,  408,  278,
        0,  279,    0,  408,  591,  591,    0,  596,  408,  597,
      598,  279,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  405,  406,  407,    0,  405,  406,  407,  409,
        0,  409,  405,  406,  407,    0,  409,  598,  599,  600,

      602,  409,  405,  406,  407,  411,    0,  411,    0,  405,
      406,  407,  411,  405,  406,  407,  409,  411,  409,  405,
      406,  407,  410,  409,    0,  599,  600,  602,  409,  405,
      406,  407,  411,  410,  411,  410,  603,  412,  413,  411,
      410,  412,  413,  605,  411,  410,    0,  412,  413,  410,
        0,  415,  606,  607,  608,  415,    0,  412,  413,  609,
      410,  415,  410,  603,  412,  413,    0,  410,  412,  413,
      605,  415,  410,  414,  412,  413,  610,  414,  415,  606,
      607,  608,  415,  414,  412,  413,  609,  416,  415,  416,
      417,  414,  417,  414,  416,  611,    0,  417,  415,  416,

      414,  612,  417,  610,  414,    0,    0,  615,    0,    0,
      414,  616,    0,  617,  416,    0,  416,  417,  414,  417,
      414,  416,  611,  420,  417,    0,  416,  420,  612,  417,
      418,  419,  418,  420,  615,  419,  418,  618,  616,  420,
      617,  419,  418,  420,  419,  421,    0,  418,  619,  421,
      420,  419,  418,  421,  420,  421,    0,  418,  419,  418,
      420,    0,  419,  418,  618,  421,  420,  622,  419,  418,
      420,  419,  421,  422,  418,  619,  421,  422,  419,  418,
      421,  423,  421,  422,  623,  423,  429,  625,  422,  626,
      429,  423,  421,  422,  622,  424,  429,  627,    0,  424,

      422,  423,  628,  424,  422,    0,  429,  629,  423,  424,
      422,  623,  423,  429,  625,  422,  626,  429,  423,  424,
      422,    0,  424,  429,  627,  425,  424,  425,  423,  628,
      424,  426,  425,  429,  629,  426,  424,  425,  630,  426,
        0,  427,    0,  427,    0,  426,  424,  631,  427,  428,
        0,  428,  425,  427,  425,  426,  428,    0,  426,  425,
        0,  428,  426,  430,  425,  630,  426,  430,  427,  431,
      427,  430,  426,  431,  631,  427,  428,  430,  428,  431,
      427,  632,  426,  428,  431,  634,    0,  430,  428,  431,
      430,  432,    0,  432,  430,  433,  431,  432,  430,  433,

      431,    0,    0,  432,  430,  433,  431,    0,  632,  636,
        0,  431,  634,  432,  430,  433,  431,    0,  432,  434,
      432,  638,  433,  434,  432,  760,  433,  762,  435,  434,
      432,  435,  433,  436,  434,  435,  636,  436,  764,  434,
      432,  435,  433,  436,  436,    0,  434,  765,  638,    0,
      434,  435,  760,  436,  762,  435,  434,  766,  435,  437,
      436,  434,  435,  437,  436,  764,  434,  767,  435,  437,
      436,  436,  438,  439,  765,  768,  438,  439,  435,  437,
      436,  439,  438,  769,  766,  440,  437,  439,  770,  440,
      437,    0,  438,    0,  767,  440,  437,  439,    0,  438,

      439,  771,  768,  438,  439,  440,  437,    0,  439,  438,
      769,  441,  440,  441,  439,  770,  440,  441,  442,  438,
      442,    0,  440,  441,  439,  442,    0,  443,  771,  443,
      442,    0,  440,  441,  443,    0,  772,    0,  441,  443,
      441,    0,    0,  774,  441,  442,  445,  442,  445,  775,
      441,    0,  442,  445,  443,    0,  443,  442,  445,    0,
      441,  443,  444,  772,  444,    0,  443,  446,  444,  444,
      774,  446,  776,  445,  444,  445,  775,  446,  447,  777,
      445,    0,  447,  778,    0,  445,  447,  446,    0,  444,
        0,  444,  447,  779,  446,  444,  444,    0,  446,  776,

        0,  444,  447,  781,  446,  447,  777,  448,  449,  447,
      778,  448,  449,  447,  446,  448,  449,  448,  449,  447,
      779,  782,  783,    0,  450,    0,  450,  448,  449,  447,
      781,  450,    0,  784,  448,  449,  450,  785,  448,  449,
      451,    0,  448,  449,  448,  449,    0,  786,  782,  783,
      451,  450,  451,  450,  448,  449,  787,  451,  450,  452,
      784,  452,  451,  450,  785,    0,  452,  451,  452,  453,
      788,  452,  454,  453,  786,  453,  454,  451,    0,  451,
      453,    0,  454,  787,  451,  453,  452,    0,  452,  451,
        0,  789,  454,  452,    0,  452,  453,  788,  452,  454,

      453,  455,  453,  454,  456,  455,    0,  453,  456,  454,
      790,  455,  453,    0,  456,    0,  455,  456,  789,  454,
      793,  455,    0,    0,  456,    0,  794,    0,  455,  458,
      457,  456,  455,  458,  457,  456,  457,  790,  455,  458,
      457,  456,  459,  455,  456,    0,  459,  793,  455,  458,
      457,  456,  459,  794,  460,  461,  458,  457,  460,  461,
      458,  457,  459,  457,  460,  461,  458,  457,  462,  459,
      796,  799,  462,  459,  460,  461,  458,  457,  462,  459,
      463,  460,  461,  802,  463,  460,  461,    0,  462,  459,
      463,  460,  461,    0,  803,  462,  463,  796,  799,  462,

      463,  460,  461,    0,  805,  462,  464,  463,  464,    0,
      802,  463,  465,  464,  465,  462,  467,  463,  464,  465,
      467,  803,    0,  463,  465,    0,  467,  463,  808,  811,
      466,  805,  466,  464,  812,  464,  467,  466,  466,  465,
      464,  465,  466,  467,  813,  464,  465,  467,  468,  469,
      469,  465,  468,  467,  469,  808,  811,  466,  468,  466,
      469,  812,  814,  467,  466,  466,  815,  816,  468,  466,
      469,  813,  819,    0,  820,  468,  469,  469,  821,  468,
      471,  469,  471,  804,  471,  468,  804,  469,  822,  814,
      471,    0,  823,  815,  816,  468,  825,  469,  470,  819,

      471,  820,  470,    0,  826,  821,  470,  471,  470,  471,
      804,  471,  470,  804,  472,  822,  472,  471,  472,  823,
      827,    0,  470,  825,  472,  470,  473,  471,    0,  470,
      473,  826,  828,  470,  472,  470,  473,    0,  830,  470,
      474,  472,  473,  472,  474,  472,  473,  827,  475,  470,
      474,  472,  475,  473,  831,  474,  832,  473,  475,  828,
      474,  472,  833,  473,  475,  830,  476,  474,  475,  473,
      476,  474,  834,  473,  835,  475,  476,  474,    0,  475,
      477,  831,  474,  832,  477,  475,  476,  474,  477,  833,
      836,  475,    0,  476,  477,  475,  837,  476,  478,  834,

      478,  835,  839,  476,  477,  478,    0,  477,  840,  841,
      478,  477,  479,  476,  479,  477,  843,  836,  479,  479,
      844,  477,  845,  837,  479,  478,  480,  478,  480,  839,
      481,  477,  478,  480,  481,  840,  841,  478,  480,  479,
      481,  479,  940,  843,  482,  479,  479,  844,  482,  845,
      481,  479,  942,  480,  482,  480,    0,  481,  483,  944,
      480,  481,  483,    0,  482,  480,  483,  481,  945,  940,
        0,  482,  483,  946,  947,  482,  484,  481,  484,  942,
        0,  482,  483,  484,  949,  483,  944,  951,  484,  483,
      485,  482,  485,  483,  485,  945,  952,  485,    0,  483,

      946,  947,  485,  484,  953,  484,  486,  486,  486,  483,
      484,  949,  954,  486,  951,  484,    0,  485,  486,  485,
      487,  485,  487,  952,  485,  488,  955,  487,  957,  485,
      959,  953,  487,  486,  486,  486,  488,    0,  488,  954,
      486,    0,  963,  488,    0,  486,  965,  487,  488,  487,
      966,    0,  488,  955,  487,  957,  972,  959,    0,  487,
      489,  973,  489,  488,  491,  488,  491,  489,  489,  963,
      488,  491,  489,  965,  490,  488,  491,  966,  490,    0,
      490,    0,  492,  972,  974,  490,  492,  489,  973,  489,
      490,  491,  492,  491,  489,  489,  493,    0,  491,  489,

      493,  490,  492,  491,  494,  490,  493,  490,  494,  492,
      977,  974,  490,  492,  494,  979,  493,  490,  495,  492,
      981,  983,  495,  493,  494,  984,  496,  493,  495,  492,
      496,  494,  985,  493,  987,  494,  496,  977,  495,  496,
      497,  494,  979,  493,  497,  495,  496,  981,  983,  495,
      497,  494,  984,  496,  988,  495,    0,  496,  497,  985,
      497,  987,  989,  496,  498,  495,  496,  497,  498,  990,
      992,  497,    0,  496,  498,  498,  499,  497,  499,    0,
      994,  988,  996,  499,  498,  497,    0,  497,  499,  989,
      997,  498,  500,  998,  500,  498,  990,  992,  999,  500,

      500,  498,  498,  499,  500,  499,  501,  994,  501,  996,
      499,  498, 1004,  501,  501,  499, 1005,  997,  501,  500,
      998,  500,  502,    0,  502,  999,  500,  500, 1078,  502,
      504,  500,  504,  501,  502,  501, 1081,  504,  504, 1004,
      501,  501,  504, 1005, 1082,  501,  503, 1083,  503,  502,
      503,  502, 1086,  503, 1087, 1078,  502,  504,  503,  504,
      505,  502,  505, 1081,  504,  504,  506,  505, 1092,  504,
      506, 1082,  505,  503, 1083,  503,  506,  503,  507, 1086,
      503, 1087,  507, 1093, 1096,  503,  506,  505,  507,  505,
     1097, 1100, 1101,  506,  505, 1092,    0,  506,  507,  505,

      508,    0,  508,  506, 1104,  507,    0,  508, 1106,  507,
     1093, 1096,  508,  506,  509,  507, 1107, 1097, 1100, 1101,
      510,  509, 1108,  509,  510,  507, 1109,  508,  509,  508,
      510, 1104,  510,  509,  508, 1106,    0,    0,    0,  508,
      510,  509,  511, 1107, 1152,    0,  511,  510,  509, 1108,
      509,  510,  511, 1109,    0,  509,    0,  510, 1153,  510,
      509,    0,  511,  513,  512,  513, 1155,  510,  512,  511,
      513, 1152,  512,  511,  514,  513,  514, 1158,  512,  511,
        0,  514,    0,  514, 1161, 1153,  514,    0,  512,  511,
      513,  512,  513, 1155, 1165,  512,    0,  513,  515,  512,

        0,  514,  513,  514, 1158,  512, 1166,  515,  514,  515,
      514, 1161, 1167,  514,  515,  512,  516, 1190,  516,  515,
     1192, 1165, 1195,  516, 1209,  515, 1216,  516,  516,    0,
      517,    0,  517, 1166,  515,    0,  515,  517,  517, 1167,
     1219,  515,  517,  516, 1190,  516,  515, 1192, 1222, 1195,
      516, 1209, 1224, 1216,  516,  516,  518,  517,  518,  517,
     1206, 1206,  518,  518,  517,  517,  519, 1219,  518,  517,
      519, 1226,  519, 1228,  520, 1222,  520,  519, 1230, 1224,
      520,  520,  519,  518,    0,  518,  520, 1232,    0,  518,
      518,    0, 1234,  519,    0,  518, 1236,  519, 1226,  519,

     1228,  520, 1206,  520,  519, 1230, 1238,  520,  520,  519,
      640,  642,  640,  520, 1232,  642,  640,  640,  641, 1234,
      641,  642,  640, 1236,  641,  641, 1240,    0,    0, 1206,
      641,  642,    0, 1238,    0,    0,  643,  640,  642,  640,
      643,    0,  642,  640,  640,  641,  643,  641,  642,  640,
      646,  641,  641, 1240,  646,  644,  643,  641,  642,  644,
      646,    0,  645,  643,  645,  644,    0,  643,  644,  645,
      646, 1211, 1211,  643,  645,  644,    0,  646,  647,    0,
      647,  646,  644,  643,  648,  647,  644,  646,  648,  645,
      647,  645,  644,    0,  648,  644,  645,  646,    0,  649,

        0,  645,  644,  649,  648,  647,    0,  647,    0,  649,
      650,  648,  647, 1211,  650,  648,    0,  647,  650,  649,
        0,  648,    0,  651,  650,    0,  649,  651,  652,    0,
      649,  648,  652,  651,  650,    0,  649,  650,  652,    0,
     1211,  650,    0,  651,    0,  650,  649,    0,  652,  653,
      651,  650,    0,  653,  651,  652,    0,  653,  654,  652,
      651,  650,  654,  653,    0,  652,  654,  655,  654,    0,
      651,  655,    0,  653,    0,  652,  653,  655,  654,    0,
      653,    0,  657,    0,  653,  654,  657,  655,    0,  654,
      653,    0,  657,  654,  655,  654,    0,  656,  655,    0,

      653,  656,  657,    0,  655,  654,    0,  656,    0,  657,
      656,  658,    0,  657,  655,  658,    0,  656,  659,  657,
      659,  658,    0,    0,  656,  659,  658,    0,  656,  657,
      659,  658,    0,    0,  656,    0,    0,  656,  658,  660,
        0,    0,  658,    0,  656,  659,    0,  659,  658,  660,
        0,  660,  659,  658,    0,    0,  660,  659,  658,    0,
      661,  660,  661,  662,    0,  662,  660,  661,  661,    0,
      662,    0,  661,    0,    0,  662,  660,    0,  660,  663,
        0,  663,    0,  660,    0,    0,  663,  661,  660,  661,
      662,  663,  662,    0,  661,  661,    0,  662,    0,  661,

        0,    0,  662,  664,  664,  664,  663,  665,  663,  665,
      664,    0,    0,  663,  665,  664,  665,    0,  663,  665,
        0,  666,    0,  666,    0,    0,    0,    0,  666,  666,
      664,  664,  664,  666,  665,    0,  665,  664,    0,    0,
      667,  665,  664,  665,    0,    0,  665,    0,  666,    0,
      666,  667,    0,  667,    0,  666,  666,    0,  667,  668,
      666,  668,    0,  667,    0,  668,  668,  667,  669,    0,
        0,  668,    0,    0,    0,    0,    0,  669,  667,  669,
      667,    0,    0,    0,  669,  667,  668,  670,  668,  669,
      667,  670,  668,  668,    0,  669,    0,  670,  668,    0,

        0,  671,    0,  671,  669,    0,  669,  670,  671,    0,
      672,  669,  672,  671,  670,    0,  669,  672,  670,  673,
        0,  673,  672,    0,  670,    0,  673,    0,  671,    0,
      671,  673,    0,    0,  670,  671,    0,  672,    0,  672,
      671,    0,    0,  674,  672,  674,  673,  674,  673,  672,
      674,    0,  675,  673,  675,  674,  675,    0,  673,  675,
        0,    0,    0,    0,  675,    0,  676,    0,  676,    0,
      674,    0,  674,  676,  674,  676,    0,  674,  676,  675,
        0,  675,  674,  675,    0,    0,  675,    0,  678,    0,
        0,  675,    0,  676,    0,  676,  677,    0,  677,  678,

      676,  678,  676,  677,  677,  676,  678,    0,  677,  679,
        0,  678,    0,    0,  680,  678,    0,    0,  680,    0,
      679,    0,  679,  677,  680,  677,  678,  679,  678,    0,
      677,  677,  679,  678,  680,  677,  679,    0,  678,    0,
      681,  680,  682,    0,  681,  680,  682,  679,    0,  679,
      681,  680,  682,    0,  679,    0,    0,  682,    0,  679,
      681,  680,  682,    0,  683,    0,  684,  681,  683,  682,
      684,  681,  683,  682,    0,    0,  684,  681,  683,  682,
        0,    0,    0,    0,  682,    0,  684,  681,  683,  682,
      685,  683,    0,  684,  685,  683,    0,  684,  686,  683,

      685,    0,  686,  684,    0,  683,  686,  689,    0,  689,
      685,    0,  686,  684,  689,  683,    0,  685,    0,  689,
      687,  685,  686,    0,  687,  686,    0,  685,  688,  686,
      687,  687,  688,  686,  689,    0,  689,  685,  688,  686,
      687,  689,    0,    0,    0,    0,  689,  687,  688,  686,
        0,  687,    0,    0,  690,  688,  690,  687,  687,  688,
        0,  690,  691,    0,  691,  688,  690,  687,    0,  691,
        0,    0,  692,    0,  691,  688,  692,    0,    0,    0,
        0,  690,  692,  690,    0,    0,    0,    0,  690,  691,
        0,  691,  692,  690,  693,    0,  691,    0,  693,  692,

        0,  691,    0,  692,  693,    0,  694,  693,  694,  692,
      695,    0,  695,  694,  693,    0,  695,  695,  694,  692,
        0,  693,  695,    0,    0,  693,    0,    0,    0,    0,
        0,  693,    0,  694,  693,  694,    0,  695,    0,  695,
      694,  693,    0,  695,  695,  694,  696,    0,  696,  695,
        0,    0,  696,  696,    0,  698,    0,  698,  696,    0,
        0,    0,  698,    0,    0,    0,    0,  698,    0,    0,
        0,    0,    0,  696,    0,  696,    0,    0,    0,  696,
      696,    0,  698,    0,  698,  696,  697,    0,  699,  698,
      699,  697,    0,  697,  698,  699,    0,  697,  697,  700,

      699,  700,  701,  697,  701,    0,  700,    0,    0,  701,
        0,  700,    0,  697,  701,  699,    0,  699,  697,    0,
      697,    0,  699,    0,  697,  697,  700,  699,  700,  701,
      697,  701,  702,  700,  702,  703,  701,  703,  700,  702,
        0,  701,  703,  703,  702,    0,  704,  703,  704,    0,
        0,    0,    0,  704,    0,    0,    0,    0,  704,  702,
        0,  702,  703,    0,  703,  705,  702,  705,    0,  703,
      703,  702,  705,  704,  703,  704,    0,  705,  706,    0,
      704,    0,  706,  707,    0,  704,  708,  707,  706,    0,
      708,    0,  705,  707,  705,    0,  708,    0,  706,  705,

      709,    0,  709,  707,  705,  706,  708,  709,  709,  706,
      707,    0,  709,  708,  707,  706,    0,  708,    0,    0,
      707,    0,    0,  708,    0,  706,    0,  709,    0,  709,
      707,    0,  710,  708,  709,  709,  710,    0,  710,  709,
      711,  712,  711,  710,    0,  712,  711,  711,  710,    0,
        0,  712,  711,    0,    0,    0,  713,    0,    0,  710,
      713,  712,    0,  710,    0,  710,  713,  711,  712,  711,
      710,    0,  712,  711,  711,  710,  713,    0,  712,  711,
      714,  715,  714,  713,    0,  715,  714,  713,  712,    0,
        0,  715,  714,  713,    0,    0,    0,    0,    0,    0,

        0,  715,  714,  713,    0,    0,    0,  714,  715,  714,
      716,  717,  715,  714,  716,  717,    0,    0,  715,  714,
      716,  717,    0,  716,  717,    0,    0,    0,  715,  714,
      716,  717,    0,    0,    0,  718,  719,  716,  717,  718,
      719,  716,  717,  718,    0,  718,  719,  716,  717,    0,
      716,  717,    0,    0,    0,  718,  719,  716,  717,    0,
      720,  721,  718,  719,  720,  721,  718,  719,  720,  721,
      718,    0,  718,  719,  720,  721,    0,    0,    0,    0,
        0,    0,  718,  719,  720,  721,    0,  720,  721,  722,
      723,  720,  721,  722,  723,  720,  721,    0,  723,  722,

      723,  720,  721,    0,    0,    0,    0,    0,    0,  722,
      723,  720,  721,    0,    0,    0,  722,  723,  724,  725,
      722,  723,  724,  725,    0,  723,  722,  723,  724,  725,
        0,  724,    0,    0,  725,    0,  722,  723,  724,  725,
      726,    0,    0,  726,  727,  724,  725,  726,  727,  724,
      725,    0,  727,  726,  727,  724,  725,    0,  724,    0,
        0,  725,    0,  726,  727,  724,  725,  726,    0,    0,
      726,  727,    0,  729,  726,  727,  728,    0,  728,  727,
      726,  727,  729,  728,  729,    0,    0,    0,  728,  729,
      726,  727,  730,    0,  729,    0,  730,  731,    0,    0,

      729,  731,  730,  728,    0,  728,  733,  731,  733,  729,
      728,  729,  730,  733,    0,  728,  729,  731,  733,  730,
        0,  729,  732,  730,  731,    0,  732,  734,  731,  730,
        0,  734,  732,  733,  731,  733,    0,  734,    0,  730,
      733,    0,  732,    0,  731,  733,  735,  734,    0,  732,
      735,  736,    0,  732,  734,  736,  735,    0,  734,  732,
        0,  736,    0,    0,  734,    0,  735,    0,    0,  732,
        0,  736,    0,  735,  734,  737,  738,  735,  736,  737,
      738,    0,  736,  735,    0,  737,  738,    0,  736,    0,
      739,    0,    0,  735,  739,  737,  738,  740,  736,  740,

      739,    0,  737,  738,  740,    0,  737,  738,    0,  740,
      739,    0,  737,  738,    0,    0,    0,  739,  741,    0,
      741,  739,  737,  738,  740,  741,  740,  739,    0,    0,
      741,  740,  742,    0,  742,    0,  740,  739,    0,  742,
        0,    0,  743,    0,  742,  741,    0,  741,  744,    0,
      744,  743,  741,  743,    0,  744,    0,  741,  743,  742,
      744,  742,    0,  743,    0,    0,  742,    0,    0,  743,
        0,  742,  745,    0,  745,  744,    0,  744,  743,  745,
      743,  745,  744,    0,  745,  743,  747,  744,  747,  746,
      743,    0,    0,  747,  747,    0,    0,    0,  747,  745,

      746,  745,  746,    0,    0,    0,  745,  746,  745,    0,
        0,  745,  746,  747,    0,  747,  746,    0,  749,  748,
      747,  747,  749,    0,  748,  747,  748,  746,  749,  746,
        0,  748,    0,    0,  746,    0,  748,  750,  749,  746,
      750,  750,    0,    0,    0,  749,  748,  750,    0,  749,
      751,  748,    0,  748,  751,  749,    0,  750,  748,    0,
      751,    0,  752,  748,  750,  749,  752,  750,  750,    0,
      751,    0,  752,    0,  750,  753,  754,  751,  752,  753,
      754,  751,  752,    0,  750,  753,  754,  751,  755,  752,
        0,    0,  755,  752,    0,  753,  754,  751,  755,  752,

        0,    0,  753,  754,    0,  752,  753,  754,  755,  752,
        0,    0,  753,  754,  756,  755,  756,    0,    0,  755,
        0,  756,  753,  754,    0,  755,  756,  849,    0,  849,
      850,    0,  850,    0,  849,  755,    0,  850,  851,  849,
      851,  756,  850,  756,    0,  851,    0,    0,  756,    0,
      851,    0,  851,  756,  849,    0,  849,  850,    0,  850,
        0,  849,    0,    0,  850,  851,  849,  851,  852,  850,
      852,    0,  851,    0,  853,  852,    0,  851,  853,  851,
      852,    0,    0,  854,  853,    0,  855,  854,    0,    0,
      855,    0,    0,  854,  853,  852,  855,  852,    0,    0,

        0,  853,  852,  854,    0,  853,  855,  852,    0,    0,
      854,  853,  856,  855,  854,    0,  856,  855,    0,    0,
      854,  853,  856,  855,  858,  858,    0,  856,    0,  858,
      854,    0,  856,  855,  857,  858,    0,    0,  857,  856,
        0,    0,  857,  856,    0,  858,    0,    0,  857,  856,
        0,  858,  858,    0,  856,    0,  858,    0,  857,  856,
        0,  857,  858,    0,  859,  857,  859,    0,    0,  857,
      859,  860,  858,  860,    0,  857,  859,    0,  860,    0,
      861,    0,  861,  860,    0,  857,  859,  861,  861,    0,
        0,  859,  861,  859,    0,    0,    0,  859,  860,    0,

      860,    0,  862,  859,    0,  860,  862,  861,    0,  861,
      860,    0,  862,  859,  861,  861,  863,  864,    0,  861,
      863,  864,  862,    0,    0,    0,  863,  864,    0,  862,
      866,    0,    0,  862,  866,    0,  863,  864,  865,  862,
      866,    0,  865,  863,  864,    0,  865,  863,  864,  862,
      866,    0,  865,  863,  864,    0,  867,  866,    0,    0,
      867,  866,  865,  863,  864,  865,  867,  866,    0,  865,
      868,  870,    0,  865,  868,  870,  867,  866,  868,  865,
        0,  870,    0,  867,  868,    0,    0,  867,  869,  865,
      869,  870,    0,  867,  868,  869,    0,  868,  870,    0,

      869,  868,  870,  867,    0,  868,  871,    0,  870,  872,
      871,  868,    0,  872,    0,  869,  871,  869,  870,  872,
        0,  868,  869,  874,  873,  874,  871,  869,  873,  872,
      874,    0,    0,  871,  873,  874,  872,  871,  875,  873,
      872,    0,  875,  871,  873,    0,  872,  879,  875,  879,
      874,  873,  874,  871,  879,  873,  872,  874,  875,  879,
      876,  873,  874,  877,  876,  875,  873,  877,    0,  875,
      876,  873,    0,  877,  879,  875,  879,    0,  877,    0,
      876,  879,    0,  877,    0,  875,  879,  876,  878,  880,
      877,  876,  878,  880,  877,    0,    0,  876,  878,  880,

      877,    0,    0,  878,    0,  877,    0,  876,  878,  880,
      877,  881,    0,  881,  882,  878,  880,  881,  882,  878,
      880,    0,    0,  881,  882,  878,  880,  883,    0,    0,
      878,  883,    0,  881,  882,  878,  880,  883,  881,    0,
      881,  882,  884,    0,  881,  882,  884,  883,    0,    0,
      881,  882,  884,    0,  883,    0,    0,  884,  883,    0,
      881,  882,  884,  885,  883,  885,    0,    0,    0,  884,
      885,    0,    0,  884,  883,  885,  886,    0,  886,  884,
        0,    0,    0,  886,  884,    0,    0,    0,  886,  884,
      885,    0,  885,    0,  887,    0,    0,  885,    0,  887,

        0,  887,  885,  886,    0,  886,  887,  888,    0,  888,
      886,  887,    0,    0,  888,  886,    0,    0,  889,  888,
      889,  887,    0,    0,    0,  889,  887,    0,  887,    0,
      889,    0,    0,  887,  888,    0,  888,    0,  887,    0,
        0,  888,  890,    0,  890,  889,  888,  889,    0,  890,
      890,  891,  889,  891,  890,    0,    0,  889,  891,    0,
      892,    0,  892,  891,    0,    0,    0,  892,    0,  890,
        0,  890,  892,    0,    0,    0,  890,  890,  891,    0,
      891,  890,    0,    0,  893,  891,  893,  892,    0,  892,
      891,  893,  893,  895,  892,  895,  893,  894,    0,  892,

      895,  894,  896,  895,  896,  895,    0,  894,    0,  896,
        0,  893,    0,  893,  896,    0,    0,  894,  893,  893,
      895,    0,  895,  893,  894,    0,    0,  895,  894,  896,
      895,  896,  895,  897,  894,  897,  896,    0,    0,  899,
      897,  896,    0,    0,  894,  897,  898,  899,  898,  899,
        0,    0,    0,  898,  899,    0,    0,    0,  898,  899,
      897,    0,  897,    0,    0,    0,  899,  897,    0,    0,
        0,    0,  897,  898,  899,  898,  899,  900,    0,  900,
      898,  899,    0,  902,  900,  898,  899,  902,  901,  900,
      901,    0,    0,  902,    0,  901,    0,    0,    0,    0,

      901,    0,    0,  902,  900,    0,  900,    0,    0,    0,
      902,  900,    0,    0,  902,  901,  900,  901,    0,  903,
      902,  903,  901,    0,  904,    0,  903,  901,    0,    0,
      902,  903,  905,    0,  905,  904,    0,  904,    0,  905,
      905,    0,  904,    0,  905,    0,  903,  904,  903,    0,
        0,  904,    0,  903,    0,    0,    0,    0,  903,  905,
        0,  905,  904,    0,  904,    0,  905,  905,    0,  904,
        0,  905,  906,  907,  904,  907,  906,  908,  906,  908,
      907,  907,    0,  906,  908,  907,    0,    0,  906,  908,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  906,

      907,    0,  907,  906,  908,  906,  908,  907,  907,    0,
      906,  908,  907,    0,    0,  906,  908,  909,  910,  909,
        0,  911,  910,  912,  909,  911,    0,  912,  910,  909,
      924,  911,  924,  912,  911,    0,  912,  924,  910,    0,
        0,  911,  924,  912,  909,  910,  909,    0,  911,  910,
      912,  909,  911,    0,  912,  910,  909,  924,  911,  924,
      912,  911,  913,  912,  924,  910,  913,  914,  911,  924,
      912,  914,  913,    0,    0,  915,  916,  914,    0,  915,
      916,    0,  913,    0,  916,  915,    0,  914,    0,  913,
      916,    0,    0,  913,  914,  915,    0,    0,  914,  913,

      916,    0,  915,  916,  914,    0,  915,  916,    0,  913,
        0,  916,  915,    0,  914,  917,    0,  916,    0,  917,
      918,  918,  915,  917,    0,  918,    0,  916,  929,  917,
      929,  918,    0,  920,  919,  929,    0,  920,  919,  917,
      929,  918,  917,  920,  919,    0,  917,  918,  918,  919,
      917,    0,  918,  920,  919,  929,  917,  929,  918,  921,
      920,  919,  929,  921,  920,  919,  917,  929,  918,  921,
      920,  919,  922,  922,  923,    0,  919,  922,  923,  921,
      920,  919,  923,  922,    0,  925,  921,  925,  923,    0,
      921,  925,  925,  922,    0,    0,  921,  925,  923,  922,

      922,  923,    0,    0,  922,  923,  921,    0,    0,  923,
      922,    0,  925,    0,  925,  923,    0,    0,  925,  925,
      922,  926,    0,  926,  925,  923,  927,    0,  926,  926,
        0,  930,    0,  926,  928,  930,    0,  927,    0,  927,
        0,  930,    0,    0,  927,  928,    0,  928,  926,  927,
      926,  930,  928,  927,    0,  926,  926,  928,  930,    0,
      926,  928,  930,  932,  927,    0,  927,  932,  930,    0,
        0,  927,  928,  932,  928,    0,  927,    0,  930,  928,
      931,  931,  933,  932,  928,  931,  933,    0,    0,    0,
      932,  931,  933,    0,  932,    0,    0,    0,    0,    0,

      932,  931,  933,    0,  934,    0,  934,  931,  931,  933,
      932,  934,  931,  933,  935,    0,  934,    0,  931,  933,
        0,    0,    0,    0,    0,  935,    0,  935,  931,  933,
        0,  934,  935,  934,    0,  936,    0,  935,  934,    0,
        0,  935,    0,  934,    0,    0,  936,    0,  936,  937,
        0,  937,  935,  936,  935,    0,  937,    0,  936,  935,
        0,  937,  936,    0,  935,  938,    0,  938,    0,    0,
        0,    0,  938,  936,    0,  936,  937,  938,  937,    0,
      936,    0,    0,  937,    0,  936, 1007, 1008,  937,    0,
     1007, 1008,  938, 1009,  938, 1009, 1007, 1008,    0,  938,

     1009,    0,    0,    0,  938, 1009, 1007, 1008,    0, 1010,
        0, 1010,    0, 1007, 1008,    0, 1010, 1007, 1008,    0,
     1009, 1010, 1009, 1007, 1008,    0,    0, 1009, 1011,    0,
     1011,    0, 1009, 1007, 1008, 1011, 1010,    0, 1010,    0,
     1011, 1012,    0, 1010,    0, 1012,    0,    0, 1010, 1013,
        0, 1012,    0, 1013,    0, 1011,    0, 1011, 1014, 1013,
     1014, 1012, 1011,    0, 1013, 1014,    0, 1011, 1012, 1013,
     1014,    0, 1012,    0,    0,    0, 1013, 1015, 1012, 1015,
     1013,    0,    0,    0, 1015, 1014, 1013, 1014, 1012, 1015,
        0, 1013, 1014, 1016,    0, 1016, 1013, 1014,    0,    0,

     1016, 1017,    0, 1017, 1015, 1016, 1015, 1018, 1017, 1018,
        0, 1015,    0, 1017, 1018,    0, 1015,    0,    0, 1018,
     1016,    0, 1016,    0,    0,    0,    0, 1016, 1017,    0,
     1017,    0, 1016,    0, 1018, 1017, 1018, 1019, 1019, 1019,
     1017, 1018, 1020, 1021, 1019, 1021, 1018,    0,    0, 1019,
     1021, 1020,    0, 1020,    0, 1021,    0,    0, 1020,    0,
        0,    0,    0, 1020, 1019, 1019, 1019,    0,    0, 1020,
     1021, 1019, 1021,    0,    0,    0, 1019, 1021, 1020, 1022,
     1020, 1022, 1021, 1024,    0, 1020, 1022, 1022,    0,    0,
     1020, 1022, 1023, 1024, 1023, 1024,    0,    0,    0, 1023,

     1024,    0,    0,    0, 1023, 1024, 1022,    0, 1022,    0,
     1024,    0,    0, 1022, 1022,    0,    0,    0, 1022, 1023,
     1024, 1023, 1024, 1025,    0, 1025, 1023, 1024, 1026,    0,
     1025, 1023, 1024,    0, 1027, 1025, 1027, 1026,    0, 1026,
        0, 1027,    0,    0, 1026,    0, 1027,    0,    0, 1026,
     1025,    0, 1025,    0,    0, 1026,    0, 1025, 1028,    0,
     1028, 1027, 1025, 1027, 1026, 1028, 1026, 1029, 1027, 1029,
     1028, 1026,    0, 1027, 1029,    0, 1026,    0, 1030, 1029,
     1031,    0, 1030,    0, 1031, 1028,    0, 1028, 1030,    0,
     1031,    0, 1028,    0, 1029,    0, 1029, 1028, 1030,    0,

     1031, 1029,    0,    0,    0, 1030, 1029, 1031,    0, 1030,
        0, 1031, 1032,    0, 1032, 1030,    0, 1031,    0, 1032,
        0, 1033,    0, 1033, 1032, 1030,    0, 1031, 1033, 1033,
     1034,    0, 1034, 1033,    0,    0,    0, 1034,    0, 1032,
        0, 1032, 1034,    0,    0,    0, 1032,    0, 1033,    0,
     1033, 1032,    0,    0,    0, 1033, 1033, 1034,    0, 1034,
     1033, 1035,    0, 1035, 1034, 1036,    0, 1036, 1035, 1034,
        0,    0, 1036, 1035, 1037,    0, 1037, 1036,    0,    0,
        0, 1037,    0,    0,    0,    0, 1037,    0, 1035,    0,
     1035,    0, 1036,    0, 1036, 1035,    0,    0,    0, 1036,

     1035, 1037,    0, 1037, 1036, 1038,    0, 1038, 1037, 1039,
     1040, 1039, 1038, 1037, 1040, 1039, 1039, 1038,    0,    0,
     1040, 1039,    0,    0,    0,    0,    0,    0,    0,    0,
     1040,    0, 1038,    0, 1038,    0, 1039, 1040, 1039, 1038,
        0, 1040, 1039, 1039, 1038, 1041, 1042, 1040, 1039, 1041,
     1042, 1043,    0, 1041,    0, 1043, 1042, 1040, 1044, 1041,
     1044, 1043,    0,    0,    0, 1044, 1042,    0,    0, 1041,
     1044, 1043, 1041, 1042,    0,    0, 1041, 1042, 1043,    0,
     1041,    0, 1043, 1042,    0, 1044, 1041, 1044, 1043,    0,
        0,    0, 1044, 1042,    0,    0, 1041, 1044, 1043, 1045,

     1046, 1045, 1046, 1047,    0, 1047, 1045, 1046,    0,    0,
     1047, 1045, 1046,    0,    0, 1047,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1045, 1046, 1045, 1046,
     1047,    0, 1047, 1045, 1046, 1048,    0, 1047, 1045, 1046,
        0,    0, 1047, 1049,    0, 1049, 1048,    0, 1048, 1050,
     1049, 1050,    0, 1048,    0, 1049, 1050, 1050, 1048, 1051,
        0, 1050, 1048, 1051,    0,    0,    0,    0,    0, 1051,
     1049,    0, 1049, 1048,    0, 1048, 1050, 1049, 1050, 1051,
     1048,    0, 1049, 1050, 1050, 1048, 1051, 1052, 1050, 1053,
     1051, 1052,    0, 1053,    0,    0, 1051, 1052,    0, 1053,

        0,    0,    0, 1056,    0, 1056, 1051, 1052,    0, 1053,
     1056, 1054,    0, 1054, 1052, 1056, 1053, 1054, 1052, 1055,
     1053, 1055,    0, 1054, 1052, 1055, 1053,    0,    0,    0,
     1056, 1055, 1056, 1054, 1052,    0, 1053, 1056, 1054,    0,
     1054, 1055, 1056,    0, 1054,    0, 1055, 1057, 1055, 1057,
     1054,    0, 1055,    0, 1057, 1058,    0, 1058, 1055, 1057,
     1054,    0, 1058, 1059,    0, 1059,    0, 1058, 1055,    0,
     1059, 1060,    0, 1060, 1057, 1059, 1057,    0, 1060,    0,
        0, 1057, 1058, 1060, 1058,    0, 1057,    0,    0, 1058,
     1059,    0, 1059,    0, 1058,    0,    0, 1059, 1060, 1061,

     1060, 1061, 1059,    0, 1063, 1060, 1061, 1062,    0, 1062,
     1060, 1061, 1064,    0, 1062, 1063,    0, 1063,    0, 1062,
        0,    0, 1063, 1064,    0, 1064, 1061, 1063, 1061,    0,
     1064, 1063,    0, 1061, 1062, 1064, 1062,    0, 1061, 1064,
        0, 1062, 1063,    0, 1063,    0, 1062, 1065,    0, 1063,
     1064,    0, 1064, 1066, 1063, 1066, 1065, 1064, 1065,    0,
     1066, 1066, 1064, 1065, 1067, 1066, 1067,    0, 1065,    0,
        0, 1067,    0,    0, 1065,    0, 1067, 1068,    0, 1068,
     1066,    0, 1066, 1065, 1068, 1065,    0, 1066, 1066, 1068,
     1065, 1067, 1066, 1067,    0, 1065,    0,    0, 1067,    0,

     1069,    0, 1069, 1067, 1068,    0, 1068, 1069, 1070,    0,
     1070, 1068, 1069,    0,    0, 1070, 1068,    0,    0, 1071,
     1070, 1071,    0,    0,    0, 1071, 1071, 1069,    0, 1069,
        0, 1071,    0,    0, 1069, 1070,    0, 1070, 1072, 1069,
     1072,    0, 1070,    0,    0, 1072, 1071, 1070, 1071, 1113,
     1072, 1113, 1071, 1071,    0,    0, 1113, 1114, 1071, 1114,
        0, 1113,    0,    0, 1114, 1072,    0, 1072, 1115, 1114,
     1115,    0, 1072,    0,    0, 1115, 1113, 1072, 1113,    0,
     1115,    0,    0, 1113, 1114,    0, 1114, 1116, 1113, 1116,
        0, 1114,    0,    0, 1116, 1115, 1114, 1115,    0, 1116,

     1117,    0, 1115,    0, 1117, 1118,    0, 1115, 1119, 1118,
     1117,    0, 1119, 1120, 1116, 1118, 1116, 1120, 1119,    0,
     1117, 1116,    0, 1120,    0, 1118, 1116, 1117, 1119,    0,
        0, 1117, 1118, 1120,    0, 1119, 1118, 1117,    0, 1119,
     1120,    0, 1118,    0, 1120, 1119,    0, 1117,    0, 1121,
     1120,    0, 1118, 1121, 1122, 1119,    0, 1123, 1122, 1121,
     1120, 1123, 1122,    0,    0,    0,    0, 1123, 1122, 1121,
        0,    0,    0,    0,    0,    0, 1121, 1123, 1122,    0,
     1121, 1122,    0, 1124, 1123, 1122, 1121, 1124, 1123, 1122,
        0,    0,    0, 1124, 1123, 1122, 1121, 1125, 1126,    0,

        0, 1125, 1126, 1124, 1123, 1122,    0, 1125, 1126,    0,
     1124, 1127, 1128, 1126, 1124, 1127, 1128, 1125, 1126,    0,
     1124, 1127, 1128,    0, 1125, 1126,    0,    0, 1125, 1126,
     1124, 1127, 1128,    0, 1125, 1126,    0, 1129, 1127, 1128,
     1126, 1129, 1127, 1128, 1125, 1126, 1130, 1129, 1127, 1128,
     1130,    0,    0,    0,    0,    0, 1130, 1129, 1127, 1128,
     1132,    0, 1132, 1131, 1129, 1131, 1130, 1132, 1129, 1131,
        0,    0, 1132, 1130, 1129, 1131,    0, 1130,    0, 1133,
        0, 1133,    0, 1130, 1129, 1131, 1133, 1132,    0, 1132,
     1131, 1133, 1131, 1130, 1132,    0, 1131, 1136, 1134, 1132,

     1134, 1136, 1131,    0,    0, 1134, 1133, 1136, 1133, 1135,
     1134, 1135, 1131, 1133,    0, 1135, 1135, 1136, 1133, 1137,
        0, 1135,    0, 1137, 1136, 1134,    0, 1134, 1136, 1137,
        0, 1138, 1134,    0, 1136, 1138, 1135, 1134, 1135, 1137,
        0, 1138, 1135, 1135, 1136, 1139, 1137,    0, 1135, 1139,
     1137, 1138,    0, 1140,    0, 1139, 1137, 1140, 1138, 1140,
     1139,    0, 1138, 1140,    0, 1139, 1137,    0, 1138,    0,
        0, 1141, 1139, 1140,    0, 1141, 1139,    0, 1138, 1142,
     1140, 1141, 1139, 1142, 1140,    0, 1140, 1139,    0, 1142,
     1140, 1141, 1139,    0,    0,    0,    0, 1143, 1141, 1142,

     1140, 1143, 1141,    0,    0, 1144, 1142, 1143, 1141, 1144,
     1142,    0, 1143,    0,    0, 1144, 1142, 1143, 1141,    0,
        0,    0,    0,    0, 1143, 1144, 1142, 1145, 1143,    0,
        0, 1145, 1144,    0, 1143,    0, 1144, 1145,    0, 1143,
     1145, 1146, 1144,    0, 1143, 1146, 1148, 1145,    0, 1146,
     1148, 1146, 1144,    0, 1145, 1147, 1148,    0, 1145, 1147,
        0, 1146,    0,    0, 1145, 1147, 1148, 1145, 1146,    0,
     1147,    0, 1146, 1148, 1145, 1147, 1146, 1148, 1146,    0,
     1149, 1150, 1147, 1148, 1149, 1150, 1147,    0, 1146,    0,
     1149, 1150, 1147, 1148,    0,    0,    0, 1147,    0,    0,

     1149, 1150, 1147,    0,    0,    0, 1170, 1149, 1150,    0,
     1170, 1149, 1150, 1171,    0, 1171, 1170, 1149, 1150, 1170,
     1171,    0, 1172,    0, 1172, 1171, 1170, 1149, 1150, 1172,
        0,    0,    0, 1170, 1172,    0,    0, 1170,    0,    0,
     1171,    0, 1171, 1170,    0,    0, 1170, 1171,    0, 1172,
        0, 1172, 1171, 1170,    0, 1173, 1172, 1173, 1174,    0,
     1174, 1172, 1173, 1173, 1175, 1174, 1175, 1173,    0,    0,
     1174, 1175,    0,    0,    0,    0, 1175,    0,    0,    0,
        0,    0, 1173,    0, 1173, 1174,    0, 1174,    0, 1173,
     1173, 1175, 1174, 1175, 1173,    0,    0, 1174, 1175, 1176,

        0, 1176, 1177, 1175, 1177,    0, 1176, 1176, 1178, 1177,
     1178, 1176,    0,    0, 1177, 1178,    0,    0,    0,    0,
     1178,    0,    0,    0,    0,    0, 1176,    0, 1176, 1177,
        0, 1177,    0, 1176, 1176, 1178, 1177, 1178, 1176,    0,
        0, 1177, 1178, 1179, 1180, 1179, 1180, 1178,    0, 1179,
     1179, 1180, 1181,    0, 1181, 1179, 1180,    0,    0, 1181,
        0,    0,    0,    0, 1181,    0,    0,    0,    0,    0,
     1179, 1180, 1179, 1180,    0,    0, 1179, 1179, 1180, 1181,
     1183, 1181, 1179, 1180, 1183, 1182, 1181, 1182,    0,    0,
     1183, 1181, 1182,    0,    0, 1184,    0, 1182, 1185, 1184,

     1183,    0, 1185,    0,    0, 1184, 1184, 1183, 1185,    0,
        0, 1183, 1182,    0, 1182, 1184,    0, 1183, 1185, 1182,
        0,    0, 1184,    0, 1182, 1185, 1184, 1183,    0, 1185,
     1186,    0, 1184, 1184, 1186, 1185,    0, 1197, 1197,    0,
     1186,    0, 1184, 1198, 1199, 1185,    0, 1198, 1199,    0,
     1186,    0,    0, 1198, 1199,    0,    0, 1186,    0,    0,
        0, 1186, 1197, 1198, 1199,    0, 1197, 1186,    0,    0,
     1198, 1199, 1197,    0, 1198, 1199,    0, 1186,    0,    0,
     1198, 1199, 1197,    0, 1200, 1201,    0, 1201, 1200, 1197,
     1198, 1199, 1201, 1197, 1200,    0, 1202, 1201, 1202, 1197,

        0,    0,    0, 1202, 1200,    0, 1204,    0, 1202, 1197,
     1204, 1200, 1201,    0, 1201, 1200, 1204,    0,    0, 1201,
     1203, 1200, 1203, 1202, 1201, 1202, 1204, 1203,    0,    0,
     1202, 1200, 1203, 1204,    0, 1202, 1212, 1204, 1213,    0,
     1212,    0, 1213, 1204,    0,    0, 1212, 1203, 1213, 1203,
     1214,    0, 1214, 1204, 1203,    0, 1212, 1214, 1213, 1203,
        0,    0, 1214, 1212, 1220, 1213, 1220, 1212,    0, 1213,
        0, 1220,    0, 1212,    0, 1213, 1220, 1214,    0, 1214,
        0,    0,    0, 1212, 1214, 1213,    0,    0,    0, 1214,
        0, 1220,    0, 1220,    0,    0,    0,    0, 1220,    0,

        0,    0,    0, 1220, 1252, 1252, 1252, 1252, 1252, 1253,
        0,    0, 1253, 1253, 1255, 1255, 1255,    0, 1255, 1256,
        0, 1256, 1256, 1256, 1257,    0, 1257, 1257, 1257, 1258,
        0, 1258, 1258, 1258, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,

     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;


/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2746 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int _line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 3034 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1252 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1251 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 161:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 168:
#line 234 "flex_lexer.l"
case 169:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 170:
YY_RULE_SETUP
#line 244 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 249 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 259 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 265 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 270 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 271 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 272 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 273 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 274 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 276 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 278 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 4014 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1252 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1252 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1251);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void hsql_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 278 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

